<?php
/**
 * RoutingApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * GraphHopper Directions API
 *
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\directions-api-client;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * RoutingApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RoutingApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return RoutingApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation routeGet
     *
     * Routing Request
     *
     * @param string[] $point Specify multiple points for which the route should be calculated. The order is important. Specify at least two points. (required)
     * @param bool $points_encoded IMPORTANT- TODO - currently you have to pass false for the swagger client - Have not found a way to force add a parameter. If &#x60;false&#x60; the coordinates in &#x60;point&#x60; and &#x60;snapped_waypoints&#x60; are returned as array using the order [lon,lat,elevation] for every point. If &#x60;true&#x60; the coordinates will be encoded as string leading to less bandwith usage. You&#39;ll need a special handling for the decoding of this string on the client-side. We provide open source code in [Java](https://github.com/graphhopper/graphhopper/blob/d70b63660ac5200b03c38ba3406b8f93976628a6/web/src/main/java/com/graphhopper/http/WebHelper.java#L43) and [JavaScript](https://github.com/graphhopper/graphhopper/blob/d70b63660ac5200b03c38ba3406b8f93976628a6/web/src/main/webapp/js/ghrequest.js#L139). It is especially important to use no 3rd party client if you set &#x60;elevation&#x3D;true&#x60;! (required)
     * @param string $key Get your key at graphhopper.com (required)
     * @param string $locale The locale of the resulting turn instructions. E.g. &#x60;pt_PT&#x60; for Portuguese or &#x60;de&#x60; for German (optional)
     * @param bool $instructions If instruction should be calculated and returned (optional)
     * @param string $vehicle The vehicle for which the route should be calculated. Other vehicles are foot, small_truck, ... (optional)
     * @param bool $elevation If &#x60;true&#x60; a third dimension - the elevation - is included in the polyline or in the GeoJson. If enabled you have to use a modified version of the decoding method or set points_encoded to &#x60;false&#x60;. See the points_encoded attribute for more details. Additionally a request can fail if the vehicle does not support elevation. See the features object for every vehicle. (optional)
     * @param bool $calc_points If the points for the route should be calculated at all printing out only distance and time. (optional)
     * @param string[] $point_hint Optional parameter. Specifies a hint for each &#x60;point&#x60; parameter to prefer a certain street for the closest location lookup. E.g. if there is an address or house with two or more neighboring streets you can control for which street the closest location is looked up. (optional)
     * @param bool $ch_disable Use this parameter in combination with one or more parameters of this table (optional)
     * @param string $weighting Which kind of &#39;best&#39; route calculation you need. Other option is &#x60;shortest&#x60; (e.g. for &#x60;vehicle&#x3D;foot&#x60; or &#x60;bike&#x60;), &#x60;short_fastest&#x60; if time and distance is expensive e.g. for &#x60;vehicle&#x3D;truck&#x60; (optional)
     * @param bool $edge_traversal Use &#x60;true&#x60; if you want to consider turn restrictions for bike and motor vehicles. Keep in mind that the response time is roughly 2 times slower. (optional)
     * @param string $algorithm The algorithm to calculate the route. Other options are &#x60;dijkstra&#x60;, &#x60;astar&#x60;, &#x60;astarbi&#x60;, &#x60;alternative_route&#x60; and &#x60;round_trip&#x60; (optional)
     * @param int $heading Favour a heading direction for a certain point. Specify either one heading for the start point or as many as there are points. In this case headings are associated by their order to the specific points. Headings are given as north based clockwise angle between 0 and 360 degree. This parameter also influences the tour generated with &#x60;algorithm&#x3D;round_trip&#x60; and force the initial direction. (optional)
     * @param int $heading_penalty Penalty for omitting a specified heading. The penalty corresponds to the accepted time delay in seconds in comparison to the route without a heading. (optional)
     * @param bool $pass_through If &#x60;true&#x60; u-turns are avoided at via-points with regard to the &#x60;heading_penalty&#x60;. (optional)
     * @param int $round_trip_distance If &#x60;algorithm&#x3D;round_trip&#x60; this parameter configures approximative length of the resulting round trip (optional)
     * @param int $round_trip_seed If &#x60;algorithm&#x3D;round_trip&#x60; this parameter introduces randomness if e.g. the first try wasn&#39;t good. (optional)
     * @param int $alternative_route_max_paths If &#x60;algorithm&#x3D;alternative_route&#x60; this parameter sets the number of maximum paths which should be calculated. Increasing can lead to worse alternatives. (optional)
     * @param int $alternative_route_max_weight_factor If &#x60;algorithm&#x3D;alternative_route&#x60; this parameter sets the factor by which the alternatives routes can be longer than the optimal route. Increasing can lead to worse alternatives. (optional)
     * @param int $alternative_route_max_share_factor If &#x60;algorithm&#x3D;alternative_route&#x60; this parameter specifies how much alternatives routes can have maximum in common with the optimal route. Increasing can lead to worse alternatives. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\RouteResponse
     */
    public function routeGet($point, $points_encoded, $key, $locale = null, $instructions = null, $vehicle = null, $elevation = null, $calc_points = null, $point_hint = null, $ch_disable = null, $weighting = null, $edge_traversal = null, $algorithm = null, $heading = null, $heading_penalty = null, $pass_through = null, $round_trip_distance = null, $round_trip_seed = null, $alternative_route_max_paths = null, $alternative_route_max_weight_factor = null, $alternative_route_max_share_factor = null)
    {
        list($response) = $this->routeGetWithHttpInfo($point, $points_encoded, $key, $locale, $instructions, $vehicle, $elevation, $calc_points, $point_hint, $ch_disable, $weighting, $edge_traversal, $algorithm, $heading, $heading_penalty, $pass_through, $round_trip_distance, $round_trip_seed, $alternative_route_max_paths, $alternative_route_max_weight_factor, $alternative_route_max_share_factor);
        return $response;
    }

    /**
     * Operation routeGetWithHttpInfo
     *
     * Routing Request
     *
     * @param string[] $point Specify multiple points for which the route should be calculated. The order is important. Specify at least two points. (required)
     * @param bool $points_encoded IMPORTANT- TODO - currently you have to pass false for the swagger client - Have not found a way to force add a parameter. If &#x60;false&#x60; the coordinates in &#x60;point&#x60; and &#x60;snapped_waypoints&#x60; are returned as array using the order [lon,lat,elevation] for every point. If &#x60;true&#x60; the coordinates will be encoded as string leading to less bandwith usage. You&#39;ll need a special handling for the decoding of this string on the client-side. We provide open source code in [Java](https://github.com/graphhopper/graphhopper/blob/d70b63660ac5200b03c38ba3406b8f93976628a6/web/src/main/java/com/graphhopper/http/WebHelper.java#L43) and [JavaScript](https://github.com/graphhopper/graphhopper/blob/d70b63660ac5200b03c38ba3406b8f93976628a6/web/src/main/webapp/js/ghrequest.js#L139). It is especially important to use no 3rd party client if you set &#x60;elevation&#x3D;true&#x60;! (required)
     * @param string $key Get your key at graphhopper.com (required)
     * @param string $locale The locale of the resulting turn instructions. E.g. &#x60;pt_PT&#x60; for Portuguese or &#x60;de&#x60; for German (optional)
     * @param bool $instructions If instruction should be calculated and returned (optional)
     * @param string $vehicle The vehicle for which the route should be calculated. Other vehicles are foot, small_truck, ... (optional)
     * @param bool $elevation If &#x60;true&#x60; a third dimension - the elevation - is included in the polyline or in the GeoJson. If enabled you have to use a modified version of the decoding method or set points_encoded to &#x60;false&#x60;. See the points_encoded attribute for more details. Additionally a request can fail if the vehicle does not support elevation. See the features object for every vehicle. (optional)
     * @param bool $calc_points If the points for the route should be calculated at all printing out only distance and time. (optional)
     * @param string[] $point_hint Optional parameter. Specifies a hint for each &#x60;point&#x60; parameter to prefer a certain street for the closest location lookup. E.g. if there is an address or house with two or more neighboring streets you can control for which street the closest location is looked up. (optional)
     * @param bool $ch_disable Use this parameter in combination with one or more parameters of this table (optional)
     * @param string $weighting Which kind of &#39;best&#39; route calculation you need. Other option is &#x60;shortest&#x60; (e.g. for &#x60;vehicle&#x3D;foot&#x60; or &#x60;bike&#x60;), &#x60;short_fastest&#x60; if time and distance is expensive e.g. for &#x60;vehicle&#x3D;truck&#x60; (optional)
     * @param bool $edge_traversal Use &#x60;true&#x60; if you want to consider turn restrictions for bike and motor vehicles. Keep in mind that the response time is roughly 2 times slower. (optional)
     * @param string $algorithm The algorithm to calculate the route. Other options are &#x60;dijkstra&#x60;, &#x60;astar&#x60;, &#x60;astarbi&#x60;, &#x60;alternative_route&#x60; and &#x60;round_trip&#x60; (optional)
     * @param int $heading Favour a heading direction for a certain point. Specify either one heading for the start point or as many as there are points. In this case headings are associated by their order to the specific points. Headings are given as north based clockwise angle between 0 and 360 degree. This parameter also influences the tour generated with &#x60;algorithm&#x3D;round_trip&#x60; and force the initial direction. (optional)
     * @param int $heading_penalty Penalty for omitting a specified heading. The penalty corresponds to the accepted time delay in seconds in comparison to the route without a heading. (optional)
     * @param bool $pass_through If &#x60;true&#x60; u-turns are avoided at via-points with regard to the &#x60;heading_penalty&#x60;. (optional)
     * @param int $round_trip_distance If &#x60;algorithm&#x3D;round_trip&#x60; this parameter configures approximative length of the resulting round trip (optional)
     * @param int $round_trip_seed If &#x60;algorithm&#x3D;round_trip&#x60; this parameter introduces randomness if e.g. the first try wasn&#39;t good. (optional)
     * @param int $alternative_route_max_paths If &#x60;algorithm&#x3D;alternative_route&#x60; this parameter sets the number of maximum paths which should be calculated. Increasing can lead to worse alternatives. (optional)
     * @param int $alternative_route_max_weight_factor If &#x60;algorithm&#x3D;alternative_route&#x60; this parameter sets the factor by which the alternatives routes can be longer than the optimal route. Increasing can lead to worse alternatives. (optional)
     * @param int $alternative_route_max_share_factor If &#x60;algorithm&#x3D;alternative_route&#x60; this parameter specifies how much alternatives routes can have maximum in common with the optimal route. Increasing can lead to worse alternatives. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\RouteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function routeGetWithHttpInfo($point, $points_encoded, $key, $locale = null, $instructions = null, $vehicle = null, $elevation = null, $calc_points = null, $point_hint = null, $ch_disable = null, $weighting = null, $edge_traversal = null, $algorithm = null, $heading = null, $heading_penalty = null, $pass_through = null, $round_trip_distance = null, $round_trip_seed = null, $alternative_route_max_paths = null, $alternative_route_max_weight_factor = null, $alternative_route_max_share_factor = null)
    {
        // verify the required parameter 'point' is set
        if ($point === null) {
            throw new \InvalidArgumentException('Missing the required parameter $point when calling routeGet');
        }
        // verify the required parameter 'points_encoded' is set
        if ($points_encoded === null) {
            throw new \InvalidArgumentException('Missing the required parameter $points_encoded when calling routeGet');
        }
        // verify the required parameter 'key' is set
        if ($key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $key when calling routeGet');
        }
        // parse inputs
        $resourcePath = "/route";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if (is_array($point)) {
            $point = $this->apiClient->getSerializer()->serializeCollection($point, 'multi', true);
        }
        if ($point !== null) {
            $queryParams['point'] = $this->apiClient->getSerializer()->toQueryValue($point);
        }
        // query params
        if ($locale !== null) {
            $queryParams['locale'] = $this->apiClient->getSerializer()->toQueryValue($locale);
        }
        // query params
        if ($instructions !== null) {
            $queryParams['instructions'] = $this->apiClient->getSerializer()->toQueryValue($instructions);
        }
        // query params
        if ($vehicle !== null) {
            $queryParams['vehicle'] = $this->apiClient->getSerializer()->toQueryValue($vehicle);
        }
        // query params
        if ($elevation !== null) {
            $queryParams['elevation'] = $this->apiClient->getSerializer()->toQueryValue($elevation);
        }
        // query params
        if ($points_encoded !== null) {
            $queryParams['points_encoded'] = $this->apiClient->getSerializer()->toQueryValue($points_encoded);
        }
        // query params
        if ($calc_points !== null) {
            $queryParams['calc_points'] = $this->apiClient->getSerializer()->toQueryValue($calc_points);
        }
        // query params
        if (is_array($point_hint)) {
            $point_hint = $this->apiClient->getSerializer()->serializeCollection($point_hint, 'multi', true);
        }
        if ($point_hint !== null) {
            $queryParams['point_hint'] = $this->apiClient->getSerializer()->toQueryValue($point_hint);
        }
        // query params
        if ($ch_disable !== null) {
            $queryParams['ch.disable'] = $this->apiClient->getSerializer()->toQueryValue($ch_disable);
        }
        // query params
        if ($weighting !== null) {
            $queryParams['weighting'] = $this->apiClient->getSerializer()->toQueryValue($weighting);
        }
        // query params
        if ($edge_traversal !== null) {
            $queryParams['edge_traversal'] = $this->apiClient->getSerializer()->toQueryValue($edge_traversal);
        }
        // query params
        if ($algorithm !== null) {
            $queryParams['algorithm'] = $this->apiClient->getSerializer()->toQueryValue($algorithm);
        }
        // query params
        if ($heading !== null) {
            $queryParams['heading'] = $this->apiClient->getSerializer()->toQueryValue($heading);
        }
        // query params
        if ($heading_penalty !== null) {
            $queryParams['heading_penalty'] = $this->apiClient->getSerializer()->toQueryValue($heading_penalty);
        }
        // query params
        if ($pass_through !== null) {
            $queryParams['pass_through'] = $this->apiClient->getSerializer()->toQueryValue($pass_through);
        }
        // query params
        if ($round_trip_distance !== null) {
            $queryParams['round_trip.distance'] = $this->apiClient->getSerializer()->toQueryValue($round_trip_distance);
        }
        // query params
        if ($round_trip_seed !== null) {
            $queryParams['round_trip.seed'] = $this->apiClient->getSerializer()->toQueryValue($round_trip_seed);
        }
        // query params
        if ($alternative_route_max_paths !== null) {
            $queryParams['alternative_route.max_paths'] = $this->apiClient->getSerializer()->toQueryValue($alternative_route_max_paths);
        }
        // query params
        if ($alternative_route_max_weight_factor !== null) {
            $queryParams['alternative_route.max_weight_factor'] = $this->apiClient->getSerializer()->toQueryValue($alternative_route_max_weight_factor);
        }
        // query params
        if ($alternative_route_max_share_factor !== null) {
            $queryParams['alternative_route.max_share_factor'] = $this->apiClient->getSerializer()->toQueryValue($alternative_route_max_share_factor);
        }
        // query params
        if ($key !== null) {
            $queryParams['key'] = $this->apiClient->getSerializer()->toQueryValue($key);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\RouteResponse',
                '/route'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\RouteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\RouteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\GHError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
