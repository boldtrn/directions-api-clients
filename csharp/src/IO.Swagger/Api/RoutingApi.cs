/* 
 * GraphHopper Directions API
 *
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRoutingApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Routing Request
        /// </summary>
        /// <remarks>
        /// The GraphHopper Routing API allows to calculate route and implement navigation via the turn instructions
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="point">Specify multiple points for which the route should be calculated. The order is important. Specify at least two points.</param>
        /// <param name="pointsEncoded">IMPORTANT- TODO - currently you have to pass false for the swagger client - Have not found a way to force add a parameter. If &#x60;false&#x60; the coordinates in &#x60;point&#x60; and &#x60;snapped_waypoints&#x60; are returned as array using the order [lon,lat,elevation] for every point. If &#x60;true&#x60; the coordinates will be encoded as string leading to less bandwith usage. You&#39;ll need a special handling for the decoding of this string on the client-side. We provide open source code in [Java](https://github.com/graphhopper/graphhopper/blob/d70b63660ac5200b03c38ba3406b8f93976628a6/web/src/main/java/com/graphhopper/http/WebHelper.java#L43) and [JavaScript](https://github.com/graphhopper/graphhopper/blob/d70b63660ac5200b03c38ba3406b8f93976628a6/web/src/main/webapp/js/ghrequest.js#L139). It is especially important to use no 3rd party client if you set &#x60;elevation&#x3D;true&#x60;!</param>
        /// <param name="key">Get your key at graphhopper.com</param>
        /// <param name="locale">The locale of the resulting turn instructions. E.g. &#x60;pt_PT&#x60; for Portuguese or &#x60;de&#x60; for German (optional)</param>
        /// <param name="instructions">If instruction should be calculated and returned (optional)</param>
        /// <param name="vehicle">The vehicle for which the route should be calculated. Other vehicles are foot, small_truck, ... (optional)</param>
        /// <param name="elevation">If &#x60;true&#x60; a third dimension - the elevation - is included in the polyline or in the GeoJson. If enabled you have to use a modified version of the decoding method or set points_encoded to &#x60;false&#x60;. See the points_encoded attribute for more details. Additionally a request can fail if the vehicle does not support elevation. See the features object for every vehicle. (optional)</param>
        /// <param name="calcPoints">If the points for the route should be calculated at all printing out only distance and time. (optional)</param>
        /// <param name="pointHint">Optional parameter. Specifies a hint for each &#x60;point&#x60; parameter to prefer a certain street for the closest location lookup. E.g. if there is an address or house with two or more neighboring streets you can control for which street the closest location is looked up. (optional)</param>
        /// <param name="chDisable">Use this parameter in combination with one or more parameters of this table (optional)</param>
        /// <param name="weighting">Which kind of &#39;best&#39; route calculation you need. Other option is &#x60;shortest&#x60; (e.g. for &#x60;vehicle&#x3D;foot&#x60; or &#x60;bike&#x60;), &#x60;short_fastest&#x60; if time and distance is expensive e.g. for &#x60;vehicle&#x3D;truck&#x60; (optional)</param>
        /// <param name="edgeTraversal">Use &#x60;true&#x60; if you want to consider turn restrictions for bike and motor vehicles. Keep in mind that the response time is roughly 2 times slower. (optional)</param>
        /// <param name="algorithm">The algorithm to calculate the route. Other options are &#x60;dijkstra&#x60;, &#x60;astar&#x60;, &#x60;astarbi&#x60;, &#x60;alternative_route&#x60; and &#x60;round_trip&#x60; (optional)</param>
        /// <param name="heading">Favour a heading direction for a certain point. Specify either one heading for the start point or as many as there are points. In this case headings are associated by their order to the specific points. Headings are given as north based clockwise angle between 0 and 360 degree. This parameter also influences the tour generated with &#x60;algorithm&#x3D;round_trip&#x60; and force the initial direction. (optional)</param>
        /// <param name="headingPenalty">Penalty for omitting a specified heading. The penalty corresponds to the accepted time delay in seconds in comparison to the route without a heading. (optional)</param>
        /// <param name="passThrough">If &#x60;true&#x60; u-turns are avoided at via-points with regard to the &#x60;heading_penalty&#x60;. (optional)</param>
        /// <param name="roundTripDistance">If &#x60;algorithm&#x3D;round_trip&#x60; this parameter configures approximative length of the resulting round trip (optional)</param>
        /// <param name="roundTripSeed">If &#x60;algorithm&#x3D;round_trip&#x60; this parameter introduces randomness if e.g. the first try wasn&#39;t good. (optional)</param>
        /// <param name="alternativeRouteMaxPaths">If &#x60;algorithm&#x3D;alternative_route&#x60; this parameter sets the number of maximum paths which should be calculated. Increasing can lead to worse alternatives. (optional)</param>
        /// <param name="alternativeRouteMaxWeightFactor">If &#x60;algorithm&#x3D;alternative_route&#x60; this parameter sets the factor by which the alternatives routes can be longer than the optimal route. Increasing can lead to worse alternatives. (optional)</param>
        /// <param name="alternativeRouteMaxShareFactor">If &#x60;algorithm&#x3D;alternative_route&#x60; this parameter specifies how much alternatives routes can have maximum in common with the optimal route. Increasing can lead to worse alternatives. (optional)</param>
        /// <returns>RouteResponse</returns>
        RouteResponse RouteGet (List<string> point, bool? pointsEncoded, string key, string locale = null, bool? instructions = null, string vehicle = null, bool? elevation = null, bool? calcPoints = null, List<string> pointHint = null, bool? chDisable = null, string weighting = null, bool? edgeTraversal = null, string algorithm = null, int? heading = null, int? headingPenalty = null, bool? passThrough = null, int? roundTripDistance = null, long? roundTripSeed = null, int? alternativeRouteMaxPaths = null, int? alternativeRouteMaxWeightFactor = null, int? alternativeRouteMaxShareFactor = null);

        /// <summary>
        /// Routing Request
        /// </summary>
        /// <remarks>
        /// The GraphHopper Routing API allows to calculate route and implement navigation via the turn instructions
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="point">Specify multiple points for which the route should be calculated. The order is important. Specify at least two points.</param>
        /// <param name="pointsEncoded">IMPORTANT- TODO - currently you have to pass false for the swagger client - Have not found a way to force add a parameter. If &#x60;false&#x60; the coordinates in &#x60;point&#x60; and &#x60;snapped_waypoints&#x60; are returned as array using the order [lon,lat,elevation] for every point. If &#x60;true&#x60; the coordinates will be encoded as string leading to less bandwith usage. You&#39;ll need a special handling for the decoding of this string on the client-side. We provide open source code in [Java](https://github.com/graphhopper/graphhopper/blob/d70b63660ac5200b03c38ba3406b8f93976628a6/web/src/main/java/com/graphhopper/http/WebHelper.java#L43) and [JavaScript](https://github.com/graphhopper/graphhopper/blob/d70b63660ac5200b03c38ba3406b8f93976628a6/web/src/main/webapp/js/ghrequest.js#L139). It is especially important to use no 3rd party client if you set &#x60;elevation&#x3D;true&#x60;!</param>
        /// <param name="key">Get your key at graphhopper.com</param>
        /// <param name="locale">The locale of the resulting turn instructions. E.g. &#x60;pt_PT&#x60; for Portuguese or &#x60;de&#x60; for German (optional)</param>
        /// <param name="instructions">If instruction should be calculated and returned (optional)</param>
        /// <param name="vehicle">The vehicle for which the route should be calculated. Other vehicles are foot, small_truck, ... (optional)</param>
        /// <param name="elevation">If &#x60;true&#x60; a third dimension - the elevation - is included in the polyline or in the GeoJson. If enabled you have to use a modified version of the decoding method or set points_encoded to &#x60;false&#x60;. See the points_encoded attribute for more details. Additionally a request can fail if the vehicle does not support elevation. See the features object for every vehicle. (optional)</param>
        /// <param name="calcPoints">If the points for the route should be calculated at all printing out only distance and time. (optional)</param>
        /// <param name="pointHint">Optional parameter. Specifies a hint for each &#x60;point&#x60; parameter to prefer a certain street for the closest location lookup. E.g. if there is an address or house with two or more neighboring streets you can control for which street the closest location is looked up. (optional)</param>
        /// <param name="chDisable">Use this parameter in combination with one or more parameters of this table (optional)</param>
        /// <param name="weighting">Which kind of &#39;best&#39; route calculation you need. Other option is &#x60;shortest&#x60; (e.g. for &#x60;vehicle&#x3D;foot&#x60; or &#x60;bike&#x60;), &#x60;short_fastest&#x60; if time and distance is expensive e.g. for &#x60;vehicle&#x3D;truck&#x60; (optional)</param>
        /// <param name="edgeTraversal">Use &#x60;true&#x60; if you want to consider turn restrictions for bike and motor vehicles. Keep in mind that the response time is roughly 2 times slower. (optional)</param>
        /// <param name="algorithm">The algorithm to calculate the route. Other options are &#x60;dijkstra&#x60;, &#x60;astar&#x60;, &#x60;astarbi&#x60;, &#x60;alternative_route&#x60; and &#x60;round_trip&#x60; (optional)</param>
        /// <param name="heading">Favour a heading direction for a certain point. Specify either one heading for the start point or as many as there are points. In this case headings are associated by their order to the specific points. Headings are given as north based clockwise angle between 0 and 360 degree. This parameter also influences the tour generated with &#x60;algorithm&#x3D;round_trip&#x60; and force the initial direction. (optional)</param>
        /// <param name="headingPenalty">Penalty for omitting a specified heading. The penalty corresponds to the accepted time delay in seconds in comparison to the route without a heading. (optional)</param>
        /// <param name="passThrough">If &#x60;true&#x60; u-turns are avoided at via-points with regard to the &#x60;heading_penalty&#x60;. (optional)</param>
        /// <param name="roundTripDistance">If &#x60;algorithm&#x3D;round_trip&#x60; this parameter configures approximative length of the resulting round trip (optional)</param>
        /// <param name="roundTripSeed">If &#x60;algorithm&#x3D;round_trip&#x60; this parameter introduces randomness if e.g. the first try wasn&#39;t good. (optional)</param>
        /// <param name="alternativeRouteMaxPaths">If &#x60;algorithm&#x3D;alternative_route&#x60; this parameter sets the number of maximum paths which should be calculated. Increasing can lead to worse alternatives. (optional)</param>
        /// <param name="alternativeRouteMaxWeightFactor">If &#x60;algorithm&#x3D;alternative_route&#x60; this parameter sets the factor by which the alternatives routes can be longer than the optimal route. Increasing can lead to worse alternatives. (optional)</param>
        /// <param name="alternativeRouteMaxShareFactor">If &#x60;algorithm&#x3D;alternative_route&#x60; this parameter specifies how much alternatives routes can have maximum in common with the optimal route. Increasing can lead to worse alternatives. (optional)</param>
        /// <returns>ApiResponse of RouteResponse</returns>
        ApiResponse<RouteResponse> RouteGetWithHttpInfo (List<string> point, bool? pointsEncoded, string key, string locale = null, bool? instructions = null, string vehicle = null, bool? elevation = null, bool? calcPoints = null, List<string> pointHint = null, bool? chDisable = null, string weighting = null, bool? edgeTraversal = null, string algorithm = null, int? heading = null, int? headingPenalty = null, bool? passThrough = null, int? roundTripDistance = null, long? roundTripSeed = null, int? alternativeRouteMaxPaths = null, int? alternativeRouteMaxWeightFactor = null, int? alternativeRouteMaxShareFactor = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Routing Request
        /// </summary>
        /// <remarks>
        /// The GraphHopper Routing API allows to calculate route and implement navigation via the turn instructions
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="point">Specify multiple points for which the route should be calculated. The order is important. Specify at least two points.</param>
        /// <param name="pointsEncoded">IMPORTANT- TODO - currently you have to pass false for the swagger client - Have not found a way to force add a parameter. If &#x60;false&#x60; the coordinates in &#x60;point&#x60; and &#x60;snapped_waypoints&#x60; are returned as array using the order [lon,lat,elevation] for every point. If &#x60;true&#x60; the coordinates will be encoded as string leading to less bandwith usage. You&#39;ll need a special handling for the decoding of this string on the client-side. We provide open source code in [Java](https://github.com/graphhopper/graphhopper/blob/d70b63660ac5200b03c38ba3406b8f93976628a6/web/src/main/java/com/graphhopper/http/WebHelper.java#L43) and [JavaScript](https://github.com/graphhopper/graphhopper/blob/d70b63660ac5200b03c38ba3406b8f93976628a6/web/src/main/webapp/js/ghrequest.js#L139). It is especially important to use no 3rd party client if you set &#x60;elevation&#x3D;true&#x60;!</param>
        /// <param name="key">Get your key at graphhopper.com</param>
        /// <param name="locale">The locale of the resulting turn instructions. E.g. &#x60;pt_PT&#x60; for Portuguese or &#x60;de&#x60; for German (optional)</param>
        /// <param name="instructions">If instruction should be calculated and returned (optional)</param>
        /// <param name="vehicle">The vehicle for which the route should be calculated. Other vehicles are foot, small_truck, ... (optional)</param>
        /// <param name="elevation">If &#x60;true&#x60; a third dimension - the elevation - is included in the polyline or in the GeoJson. If enabled you have to use a modified version of the decoding method or set points_encoded to &#x60;false&#x60;. See the points_encoded attribute for more details. Additionally a request can fail if the vehicle does not support elevation. See the features object for every vehicle. (optional)</param>
        /// <param name="calcPoints">If the points for the route should be calculated at all printing out only distance and time. (optional)</param>
        /// <param name="pointHint">Optional parameter. Specifies a hint for each &#x60;point&#x60; parameter to prefer a certain street for the closest location lookup. E.g. if there is an address or house with two or more neighboring streets you can control for which street the closest location is looked up. (optional)</param>
        /// <param name="chDisable">Use this parameter in combination with one or more parameters of this table (optional)</param>
        /// <param name="weighting">Which kind of &#39;best&#39; route calculation you need. Other option is &#x60;shortest&#x60; (e.g. for &#x60;vehicle&#x3D;foot&#x60; or &#x60;bike&#x60;), &#x60;short_fastest&#x60; if time and distance is expensive e.g. for &#x60;vehicle&#x3D;truck&#x60; (optional)</param>
        /// <param name="edgeTraversal">Use &#x60;true&#x60; if you want to consider turn restrictions for bike and motor vehicles. Keep in mind that the response time is roughly 2 times slower. (optional)</param>
        /// <param name="algorithm">The algorithm to calculate the route. Other options are &#x60;dijkstra&#x60;, &#x60;astar&#x60;, &#x60;astarbi&#x60;, &#x60;alternative_route&#x60; and &#x60;round_trip&#x60; (optional)</param>
        /// <param name="heading">Favour a heading direction for a certain point. Specify either one heading for the start point or as many as there are points. In this case headings are associated by their order to the specific points. Headings are given as north based clockwise angle between 0 and 360 degree. This parameter also influences the tour generated with &#x60;algorithm&#x3D;round_trip&#x60; and force the initial direction. (optional)</param>
        /// <param name="headingPenalty">Penalty for omitting a specified heading. The penalty corresponds to the accepted time delay in seconds in comparison to the route without a heading. (optional)</param>
        /// <param name="passThrough">If &#x60;true&#x60; u-turns are avoided at via-points with regard to the &#x60;heading_penalty&#x60;. (optional)</param>
        /// <param name="roundTripDistance">If &#x60;algorithm&#x3D;round_trip&#x60; this parameter configures approximative length of the resulting round trip (optional)</param>
        /// <param name="roundTripSeed">If &#x60;algorithm&#x3D;round_trip&#x60; this parameter introduces randomness if e.g. the first try wasn&#39;t good. (optional)</param>
        /// <param name="alternativeRouteMaxPaths">If &#x60;algorithm&#x3D;alternative_route&#x60; this parameter sets the number of maximum paths which should be calculated. Increasing can lead to worse alternatives. (optional)</param>
        /// <param name="alternativeRouteMaxWeightFactor">If &#x60;algorithm&#x3D;alternative_route&#x60; this parameter sets the factor by which the alternatives routes can be longer than the optimal route. Increasing can lead to worse alternatives. (optional)</param>
        /// <param name="alternativeRouteMaxShareFactor">If &#x60;algorithm&#x3D;alternative_route&#x60; this parameter specifies how much alternatives routes can have maximum in common with the optimal route. Increasing can lead to worse alternatives. (optional)</param>
        /// <returns>Task of RouteResponse</returns>
        System.Threading.Tasks.Task<RouteResponse> RouteGetAsync (List<string> point, bool? pointsEncoded, string key, string locale = null, bool? instructions = null, string vehicle = null, bool? elevation = null, bool? calcPoints = null, List<string> pointHint = null, bool? chDisable = null, string weighting = null, bool? edgeTraversal = null, string algorithm = null, int? heading = null, int? headingPenalty = null, bool? passThrough = null, int? roundTripDistance = null, long? roundTripSeed = null, int? alternativeRouteMaxPaths = null, int? alternativeRouteMaxWeightFactor = null, int? alternativeRouteMaxShareFactor = null);

        /// <summary>
        /// Routing Request
        /// </summary>
        /// <remarks>
        /// The GraphHopper Routing API allows to calculate route and implement navigation via the turn instructions
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="point">Specify multiple points for which the route should be calculated. The order is important. Specify at least two points.</param>
        /// <param name="pointsEncoded">IMPORTANT- TODO - currently you have to pass false for the swagger client - Have not found a way to force add a parameter. If &#x60;false&#x60; the coordinates in &#x60;point&#x60; and &#x60;snapped_waypoints&#x60; are returned as array using the order [lon,lat,elevation] for every point. If &#x60;true&#x60; the coordinates will be encoded as string leading to less bandwith usage. You&#39;ll need a special handling for the decoding of this string on the client-side. We provide open source code in [Java](https://github.com/graphhopper/graphhopper/blob/d70b63660ac5200b03c38ba3406b8f93976628a6/web/src/main/java/com/graphhopper/http/WebHelper.java#L43) and [JavaScript](https://github.com/graphhopper/graphhopper/blob/d70b63660ac5200b03c38ba3406b8f93976628a6/web/src/main/webapp/js/ghrequest.js#L139). It is especially important to use no 3rd party client if you set &#x60;elevation&#x3D;true&#x60;!</param>
        /// <param name="key">Get your key at graphhopper.com</param>
        /// <param name="locale">The locale of the resulting turn instructions. E.g. &#x60;pt_PT&#x60; for Portuguese or &#x60;de&#x60; for German (optional)</param>
        /// <param name="instructions">If instruction should be calculated and returned (optional)</param>
        /// <param name="vehicle">The vehicle for which the route should be calculated. Other vehicles are foot, small_truck, ... (optional)</param>
        /// <param name="elevation">If &#x60;true&#x60; a third dimension - the elevation - is included in the polyline or in the GeoJson. If enabled you have to use a modified version of the decoding method or set points_encoded to &#x60;false&#x60;. See the points_encoded attribute for more details. Additionally a request can fail if the vehicle does not support elevation. See the features object for every vehicle. (optional)</param>
        /// <param name="calcPoints">If the points for the route should be calculated at all printing out only distance and time. (optional)</param>
        /// <param name="pointHint">Optional parameter. Specifies a hint for each &#x60;point&#x60; parameter to prefer a certain street for the closest location lookup. E.g. if there is an address or house with two or more neighboring streets you can control for which street the closest location is looked up. (optional)</param>
        /// <param name="chDisable">Use this parameter in combination with one or more parameters of this table (optional)</param>
        /// <param name="weighting">Which kind of &#39;best&#39; route calculation you need. Other option is &#x60;shortest&#x60; (e.g. for &#x60;vehicle&#x3D;foot&#x60; or &#x60;bike&#x60;), &#x60;short_fastest&#x60; if time and distance is expensive e.g. for &#x60;vehicle&#x3D;truck&#x60; (optional)</param>
        /// <param name="edgeTraversal">Use &#x60;true&#x60; if you want to consider turn restrictions for bike and motor vehicles. Keep in mind that the response time is roughly 2 times slower. (optional)</param>
        /// <param name="algorithm">The algorithm to calculate the route. Other options are &#x60;dijkstra&#x60;, &#x60;astar&#x60;, &#x60;astarbi&#x60;, &#x60;alternative_route&#x60; and &#x60;round_trip&#x60; (optional)</param>
        /// <param name="heading">Favour a heading direction for a certain point. Specify either one heading for the start point or as many as there are points. In this case headings are associated by their order to the specific points. Headings are given as north based clockwise angle between 0 and 360 degree. This parameter also influences the tour generated with &#x60;algorithm&#x3D;round_trip&#x60; and force the initial direction. (optional)</param>
        /// <param name="headingPenalty">Penalty for omitting a specified heading. The penalty corresponds to the accepted time delay in seconds in comparison to the route without a heading. (optional)</param>
        /// <param name="passThrough">If &#x60;true&#x60; u-turns are avoided at via-points with regard to the &#x60;heading_penalty&#x60;. (optional)</param>
        /// <param name="roundTripDistance">If &#x60;algorithm&#x3D;round_trip&#x60; this parameter configures approximative length of the resulting round trip (optional)</param>
        /// <param name="roundTripSeed">If &#x60;algorithm&#x3D;round_trip&#x60; this parameter introduces randomness if e.g. the first try wasn&#39;t good. (optional)</param>
        /// <param name="alternativeRouteMaxPaths">If &#x60;algorithm&#x3D;alternative_route&#x60; this parameter sets the number of maximum paths which should be calculated. Increasing can lead to worse alternatives. (optional)</param>
        /// <param name="alternativeRouteMaxWeightFactor">If &#x60;algorithm&#x3D;alternative_route&#x60; this parameter sets the factor by which the alternatives routes can be longer than the optimal route. Increasing can lead to worse alternatives. (optional)</param>
        /// <param name="alternativeRouteMaxShareFactor">If &#x60;algorithm&#x3D;alternative_route&#x60; this parameter specifies how much alternatives routes can have maximum in common with the optimal route. Increasing can lead to worse alternatives. (optional)</param>
        /// <returns>Task of ApiResponse (RouteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RouteResponse>> RouteGetAsyncWithHttpInfo (List<string> point, bool? pointsEncoded, string key, string locale = null, bool? instructions = null, string vehicle = null, bool? elevation = null, bool? calcPoints = null, List<string> pointHint = null, bool? chDisable = null, string weighting = null, bool? edgeTraversal = null, string algorithm = null, int? heading = null, int? headingPenalty = null, bool? passThrough = null, int? roundTripDistance = null, long? roundTripSeed = null, int? alternativeRouteMaxPaths = null, int? alternativeRouteMaxWeightFactor = null, int? alternativeRouteMaxShareFactor = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RoutingApi : IRoutingApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RoutingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RoutingApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RoutingApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RoutingApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Routing Request The GraphHopper Routing API allows to calculate route and implement navigation via the turn instructions
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="point">Specify multiple points for which the route should be calculated. The order is important. Specify at least two points.</param>
        /// <param name="pointsEncoded">IMPORTANT- TODO - currently you have to pass false for the swagger client - Have not found a way to force add a parameter. If &#x60;false&#x60; the coordinates in &#x60;point&#x60; and &#x60;snapped_waypoints&#x60; are returned as array using the order [lon,lat,elevation] for every point. If &#x60;true&#x60; the coordinates will be encoded as string leading to less bandwith usage. You&#39;ll need a special handling for the decoding of this string on the client-side. We provide open source code in [Java](https://github.com/graphhopper/graphhopper/blob/d70b63660ac5200b03c38ba3406b8f93976628a6/web/src/main/java/com/graphhopper/http/WebHelper.java#L43) and [JavaScript](https://github.com/graphhopper/graphhopper/blob/d70b63660ac5200b03c38ba3406b8f93976628a6/web/src/main/webapp/js/ghrequest.js#L139). It is especially important to use no 3rd party client if you set &#x60;elevation&#x3D;true&#x60;!</param>
        /// <param name="key">Get your key at graphhopper.com</param>
        /// <param name="locale">The locale of the resulting turn instructions. E.g. &#x60;pt_PT&#x60; for Portuguese or &#x60;de&#x60; for German (optional)</param>
        /// <param name="instructions">If instruction should be calculated and returned (optional)</param>
        /// <param name="vehicle">The vehicle for which the route should be calculated. Other vehicles are foot, small_truck, ... (optional)</param>
        /// <param name="elevation">If &#x60;true&#x60; a third dimension - the elevation - is included in the polyline or in the GeoJson. If enabled you have to use a modified version of the decoding method or set points_encoded to &#x60;false&#x60;. See the points_encoded attribute for more details. Additionally a request can fail if the vehicle does not support elevation. See the features object for every vehicle. (optional)</param>
        /// <param name="calcPoints">If the points for the route should be calculated at all printing out only distance and time. (optional)</param>
        /// <param name="pointHint">Optional parameter. Specifies a hint for each &#x60;point&#x60; parameter to prefer a certain street for the closest location lookup. E.g. if there is an address or house with two or more neighboring streets you can control for which street the closest location is looked up. (optional)</param>
        /// <param name="chDisable">Use this parameter in combination with one or more parameters of this table (optional)</param>
        /// <param name="weighting">Which kind of &#39;best&#39; route calculation you need. Other option is &#x60;shortest&#x60; (e.g. for &#x60;vehicle&#x3D;foot&#x60; or &#x60;bike&#x60;), &#x60;short_fastest&#x60; if time and distance is expensive e.g. for &#x60;vehicle&#x3D;truck&#x60; (optional)</param>
        /// <param name="edgeTraversal">Use &#x60;true&#x60; if you want to consider turn restrictions for bike and motor vehicles. Keep in mind that the response time is roughly 2 times slower. (optional)</param>
        /// <param name="algorithm">The algorithm to calculate the route. Other options are &#x60;dijkstra&#x60;, &#x60;astar&#x60;, &#x60;astarbi&#x60;, &#x60;alternative_route&#x60; and &#x60;round_trip&#x60; (optional)</param>
        /// <param name="heading">Favour a heading direction for a certain point. Specify either one heading for the start point or as many as there are points. In this case headings are associated by their order to the specific points. Headings are given as north based clockwise angle between 0 and 360 degree. This parameter also influences the tour generated with &#x60;algorithm&#x3D;round_trip&#x60; and force the initial direction. (optional)</param>
        /// <param name="headingPenalty">Penalty for omitting a specified heading. The penalty corresponds to the accepted time delay in seconds in comparison to the route without a heading. (optional)</param>
        /// <param name="passThrough">If &#x60;true&#x60; u-turns are avoided at via-points with regard to the &#x60;heading_penalty&#x60;. (optional)</param>
        /// <param name="roundTripDistance">If &#x60;algorithm&#x3D;round_trip&#x60; this parameter configures approximative length of the resulting round trip (optional)</param>
        /// <param name="roundTripSeed">If &#x60;algorithm&#x3D;round_trip&#x60; this parameter introduces randomness if e.g. the first try wasn&#39;t good. (optional)</param>
        /// <param name="alternativeRouteMaxPaths">If &#x60;algorithm&#x3D;alternative_route&#x60; this parameter sets the number of maximum paths which should be calculated. Increasing can lead to worse alternatives. (optional)</param>
        /// <param name="alternativeRouteMaxWeightFactor">If &#x60;algorithm&#x3D;alternative_route&#x60; this parameter sets the factor by which the alternatives routes can be longer than the optimal route. Increasing can lead to worse alternatives. (optional)</param>
        /// <param name="alternativeRouteMaxShareFactor">If &#x60;algorithm&#x3D;alternative_route&#x60; this parameter specifies how much alternatives routes can have maximum in common with the optimal route. Increasing can lead to worse alternatives. (optional)</param>
        /// <returns>RouteResponse</returns>
        public RouteResponse RouteGet (List<string> point, bool? pointsEncoded, string key, string locale = null, bool? instructions = null, string vehicle = null, bool? elevation = null, bool? calcPoints = null, List<string> pointHint = null, bool? chDisable = null, string weighting = null, bool? edgeTraversal = null, string algorithm = null, int? heading = null, int? headingPenalty = null, bool? passThrough = null, int? roundTripDistance = null, long? roundTripSeed = null, int? alternativeRouteMaxPaths = null, int? alternativeRouteMaxWeightFactor = null, int? alternativeRouteMaxShareFactor = null)
        {
             ApiResponse<RouteResponse> localVarResponse = RouteGetWithHttpInfo(point, pointsEncoded, key, locale, instructions, vehicle, elevation, calcPoints, pointHint, chDisable, weighting, edgeTraversal, algorithm, heading, headingPenalty, passThrough, roundTripDistance, roundTripSeed, alternativeRouteMaxPaths, alternativeRouteMaxWeightFactor, alternativeRouteMaxShareFactor);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Routing Request The GraphHopper Routing API allows to calculate route and implement navigation via the turn instructions
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="point">Specify multiple points for which the route should be calculated. The order is important. Specify at least two points.</param>
        /// <param name="pointsEncoded">IMPORTANT- TODO - currently you have to pass false for the swagger client - Have not found a way to force add a parameter. If &#x60;false&#x60; the coordinates in &#x60;point&#x60; and &#x60;snapped_waypoints&#x60; are returned as array using the order [lon,lat,elevation] for every point. If &#x60;true&#x60; the coordinates will be encoded as string leading to less bandwith usage. You&#39;ll need a special handling for the decoding of this string on the client-side. We provide open source code in [Java](https://github.com/graphhopper/graphhopper/blob/d70b63660ac5200b03c38ba3406b8f93976628a6/web/src/main/java/com/graphhopper/http/WebHelper.java#L43) and [JavaScript](https://github.com/graphhopper/graphhopper/blob/d70b63660ac5200b03c38ba3406b8f93976628a6/web/src/main/webapp/js/ghrequest.js#L139). It is especially important to use no 3rd party client if you set &#x60;elevation&#x3D;true&#x60;!</param>
        /// <param name="key">Get your key at graphhopper.com</param>
        /// <param name="locale">The locale of the resulting turn instructions. E.g. &#x60;pt_PT&#x60; for Portuguese or &#x60;de&#x60; for German (optional)</param>
        /// <param name="instructions">If instruction should be calculated and returned (optional)</param>
        /// <param name="vehicle">The vehicle for which the route should be calculated. Other vehicles are foot, small_truck, ... (optional)</param>
        /// <param name="elevation">If &#x60;true&#x60; a third dimension - the elevation - is included in the polyline or in the GeoJson. If enabled you have to use a modified version of the decoding method or set points_encoded to &#x60;false&#x60;. See the points_encoded attribute for more details. Additionally a request can fail if the vehicle does not support elevation. See the features object for every vehicle. (optional)</param>
        /// <param name="calcPoints">If the points for the route should be calculated at all printing out only distance and time. (optional)</param>
        /// <param name="pointHint">Optional parameter. Specifies a hint for each &#x60;point&#x60; parameter to prefer a certain street for the closest location lookup. E.g. if there is an address or house with two or more neighboring streets you can control for which street the closest location is looked up. (optional)</param>
        /// <param name="chDisable">Use this parameter in combination with one or more parameters of this table (optional)</param>
        /// <param name="weighting">Which kind of &#39;best&#39; route calculation you need. Other option is &#x60;shortest&#x60; (e.g. for &#x60;vehicle&#x3D;foot&#x60; or &#x60;bike&#x60;), &#x60;short_fastest&#x60; if time and distance is expensive e.g. for &#x60;vehicle&#x3D;truck&#x60; (optional)</param>
        /// <param name="edgeTraversal">Use &#x60;true&#x60; if you want to consider turn restrictions for bike and motor vehicles. Keep in mind that the response time is roughly 2 times slower. (optional)</param>
        /// <param name="algorithm">The algorithm to calculate the route. Other options are &#x60;dijkstra&#x60;, &#x60;astar&#x60;, &#x60;astarbi&#x60;, &#x60;alternative_route&#x60; and &#x60;round_trip&#x60; (optional)</param>
        /// <param name="heading">Favour a heading direction for a certain point. Specify either one heading for the start point or as many as there are points. In this case headings are associated by their order to the specific points. Headings are given as north based clockwise angle between 0 and 360 degree. This parameter also influences the tour generated with &#x60;algorithm&#x3D;round_trip&#x60; and force the initial direction. (optional)</param>
        /// <param name="headingPenalty">Penalty for omitting a specified heading. The penalty corresponds to the accepted time delay in seconds in comparison to the route without a heading. (optional)</param>
        /// <param name="passThrough">If &#x60;true&#x60; u-turns are avoided at via-points with regard to the &#x60;heading_penalty&#x60;. (optional)</param>
        /// <param name="roundTripDistance">If &#x60;algorithm&#x3D;round_trip&#x60; this parameter configures approximative length of the resulting round trip (optional)</param>
        /// <param name="roundTripSeed">If &#x60;algorithm&#x3D;round_trip&#x60; this parameter introduces randomness if e.g. the first try wasn&#39;t good. (optional)</param>
        /// <param name="alternativeRouteMaxPaths">If &#x60;algorithm&#x3D;alternative_route&#x60; this parameter sets the number of maximum paths which should be calculated. Increasing can lead to worse alternatives. (optional)</param>
        /// <param name="alternativeRouteMaxWeightFactor">If &#x60;algorithm&#x3D;alternative_route&#x60; this parameter sets the factor by which the alternatives routes can be longer than the optimal route. Increasing can lead to worse alternatives. (optional)</param>
        /// <param name="alternativeRouteMaxShareFactor">If &#x60;algorithm&#x3D;alternative_route&#x60; this parameter specifies how much alternatives routes can have maximum in common with the optimal route. Increasing can lead to worse alternatives. (optional)</param>
        /// <returns>ApiResponse of RouteResponse</returns>
        public ApiResponse< RouteResponse > RouteGetWithHttpInfo (List<string> point, bool? pointsEncoded, string key, string locale = null, bool? instructions = null, string vehicle = null, bool? elevation = null, bool? calcPoints = null, List<string> pointHint = null, bool? chDisable = null, string weighting = null, bool? edgeTraversal = null, string algorithm = null, int? heading = null, int? headingPenalty = null, bool? passThrough = null, int? roundTripDistance = null, long? roundTripSeed = null, int? alternativeRouteMaxPaths = null, int? alternativeRouteMaxWeightFactor = null, int? alternativeRouteMaxShareFactor = null)
        {
            // verify the required parameter 'point' is set
            if (point == null)
                throw new ApiException(400, "Missing required parameter 'point' when calling RoutingApi->RouteGet");
            // verify the required parameter 'pointsEncoded' is set
            if (pointsEncoded == null)
                throw new ApiException(400, "Missing required parameter 'pointsEncoded' when calling RoutingApi->RouteGet");
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling RoutingApi->RouteGet");

            var localVarPath = "/route";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (point != null) localVarQueryParams.Add("point", Configuration.ApiClient.ParameterToString(point)); // query parameter
            if (locale != null) localVarQueryParams.Add("locale", Configuration.ApiClient.ParameterToString(locale)); // query parameter
            if (instructions != null) localVarQueryParams.Add("instructions", Configuration.ApiClient.ParameterToString(instructions)); // query parameter
            if (vehicle != null) localVarQueryParams.Add("vehicle", Configuration.ApiClient.ParameterToString(vehicle)); // query parameter
            if (elevation != null) localVarQueryParams.Add("elevation", Configuration.ApiClient.ParameterToString(elevation)); // query parameter
            if (pointsEncoded != null) localVarQueryParams.Add("points_encoded", Configuration.ApiClient.ParameterToString(pointsEncoded)); // query parameter
            if (calcPoints != null) localVarQueryParams.Add("calc_points", Configuration.ApiClient.ParameterToString(calcPoints)); // query parameter
            if (pointHint != null) localVarQueryParams.Add("point_hint", Configuration.ApiClient.ParameterToString(pointHint)); // query parameter
            if (chDisable != null) localVarQueryParams.Add("ch.disable", Configuration.ApiClient.ParameterToString(chDisable)); // query parameter
            if (weighting != null) localVarQueryParams.Add("weighting", Configuration.ApiClient.ParameterToString(weighting)); // query parameter
            if (edgeTraversal != null) localVarQueryParams.Add("edge_traversal", Configuration.ApiClient.ParameterToString(edgeTraversal)); // query parameter
            if (algorithm != null) localVarQueryParams.Add("algorithm", Configuration.ApiClient.ParameterToString(algorithm)); // query parameter
            if (heading != null) localVarQueryParams.Add("heading", Configuration.ApiClient.ParameterToString(heading)); // query parameter
            if (headingPenalty != null) localVarQueryParams.Add("heading_penalty", Configuration.ApiClient.ParameterToString(headingPenalty)); // query parameter
            if (passThrough != null) localVarQueryParams.Add("pass_through", Configuration.ApiClient.ParameterToString(passThrough)); // query parameter
            if (roundTripDistance != null) localVarQueryParams.Add("round_trip.distance", Configuration.ApiClient.ParameterToString(roundTripDistance)); // query parameter
            if (roundTripSeed != null) localVarQueryParams.Add("round_trip.seed", Configuration.ApiClient.ParameterToString(roundTripSeed)); // query parameter
            if (alternativeRouteMaxPaths != null) localVarQueryParams.Add("alternative_route.max_paths", Configuration.ApiClient.ParameterToString(alternativeRouteMaxPaths)); // query parameter
            if (alternativeRouteMaxWeightFactor != null) localVarQueryParams.Add("alternative_route.max_weight_factor", Configuration.ApiClient.ParameterToString(alternativeRouteMaxWeightFactor)); // query parameter
            if (alternativeRouteMaxShareFactor != null) localVarQueryParams.Add("alternative_route.max_share_factor", Configuration.ApiClient.ParameterToString(alternativeRouteMaxShareFactor)); // query parameter
            if (key != null) localVarQueryParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RouteGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RouteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RouteResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RouteResponse)));
        }

        /// <summary>
        /// Routing Request The GraphHopper Routing API allows to calculate route and implement navigation via the turn instructions
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="point">Specify multiple points for which the route should be calculated. The order is important. Specify at least two points.</param>
        /// <param name="pointsEncoded">IMPORTANT- TODO - currently you have to pass false for the swagger client - Have not found a way to force add a parameter. If &#x60;false&#x60; the coordinates in &#x60;point&#x60; and &#x60;snapped_waypoints&#x60; are returned as array using the order [lon,lat,elevation] for every point. If &#x60;true&#x60; the coordinates will be encoded as string leading to less bandwith usage. You&#39;ll need a special handling for the decoding of this string on the client-side. We provide open source code in [Java](https://github.com/graphhopper/graphhopper/blob/d70b63660ac5200b03c38ba3406b8f93976628a6/web/src/main/java/com/graphhopper/http/WebHelper.java#L43) and [JavaScript](https://github.com/graphhopper/graphhopper/blob/d70b63660ac5200b03c38ba3406b8f93976628a6/web/src/main/webapp/js/ghrequest.js#L139). It is especially important to use no 3rd party client if you set &#x60;elevation&#x3D;true&#x60;!</param>
        /// <param name="key">Get your key at graphhopper.com</param>
        /// <param name="locale">The locale of the resulting turn instructions. E.g. &#x60;pt_PT&#x60; for Portuguese or &#x60;de&#x60; for German (optional)</param>
        /// <param name="instructions">If instruction should be calculated and returned (optional)</param>
        /// <param name="vehicle">The vehicle for which the route should be calculated. Other vehicles are foot, small_truck, ... (optional)</param>
        /// <param name="elevation">If &#x60;true&#x60; a third dimension - the elevation - is included in the polyline or in the GeoJson. If enabled you have to use a modified version of the decoding method or set points_encoded to &#x60;false&#x60;. See the points_encoded attribute for more details. Additionally a request can fail if the vehicle does not support elevation. See the features object for every vehicle. (optional)</param>
        /// <param name="calcPoints">If the points for the route should be calculated at all printing out only distance and time. (optional)</param>
        /// <param name="pointHint">Optional parameter. Specifies a hint for each &#x60;point&#x60; parameter to prefer a certain street for the closest location lookup. E.g. if there is an address or house with two or more neighboring streets you can control for which street the closest location is looked up. (optional)</param>
        /// <param name="chDisable">Use this parameter in combination with one or more parameters of this table (optional)</param>
        /// <param name="weighting">Which kind of &#39;best&#39; route calculation you need. Other option is &#x60;shortest&#x60; (e.g. for &#x60;vehicle&#x3D;foot&#x60; or &#x60;bike&#x60;), &#x60;short_fastest&#x60; if time and distance is expensive e.g. for &#x60;vehicle&#x3D;truck&#x60; (optional)</param>
        /// <param name="edgeTraversal">Use &#x60;true&#x60; if you want to consider turn restrictions for bike and motor vehicles. Keep in mind that the response time is roughly 2 times slower. (optional)</param>
        /// <param name="algorithm">The algorithm to calculate the route. Other options are &#x60;dijkstra&#x60;, &#x60;astar&#x60;, &#x60;astarbi&#x60;, &#x60;alternative_route&#x60; and &#x60;round_trip&#x60; (optional)</param>
        /// <param name="heading">Favour a heading direction for a certain point. Specify either one heading for the start point or as many as there are points. In this case headings are associated by their order to the specific points. Headings are given as north based clockwise angle between 0 and 360 degree. This parameter also influences the tour generated with &#x60;algorithm&#x3D;round_trip&#x60; and force the initial direction. (optional)</param>
        /// <param name="headingPenalty">Penalty for omitting a specified heading. The penalty corresponds to the accepted time delay in seconds in comparison to the route without a heading. (optional)</param>
        /// <param name="passThrough">If &#x60;true&#x60; u-turns are avoided at via-points with regard to the &#x60;heading_penalty&#x60;. (optional)</param>
        /// <param name="roundTripDistance">If &#x60;algorithm&#x3D;round_trip&#x60; this parameter configures approximative length of the resulting round trip (optional)</param>
        /// <param name="roundTripSeed">If &#x60;algorithm&#x3D;round_trip&#x60; this parameter introduces randomness if e.g. the first try wasn&#39;t good. (optional)</param>
        /// <param name="alternativeRouteMaxPaths">If &#x60;algorithm&#x3D;alternative_route&#x60; this parameter sets the number of maximum paths which should be calculated. Increasing can lead to worse alternatives. (optional)</param>
        /// <param name="alternativeRouteMaxWeightFactor">If &#x60;algorithm&#x3D;alternative_route&#x60; this parameter sets the factor by which the alternatives routes can be longer than the optimal route. Increasing can lead to worse alternatives. (optional)</param>
        /// <param name="alternativeRouteMaxShareFactor">If &#x60;algorithm&#x3D;alternative_route&#x60; this parameter specifies how much alternatives routes can have maximum in common with the optimal route. Increasing can lead to worse alternatives. (optional)</param>
        /// <returns>Task of RouteResponse</returns>
        public async System.Threading.Tasks.Task<RouteResponse> RouteGetAsync (List<string> point, bool? pointsEncoded, string key, string locale = null, bool? instructions = null, string vehicle = null, bool? elevation = null, bool? calcPoints = null, List<string> pointHint = null, bool? chDisable = null, string weighting = null, bool? edgeTraversal = null, string algorithm = null, int? heading = null, int? headingPenalty = null, bool? passThrough = null, int? roundTripDistance = null, long? roundTripSeed = null, int? alternativeRouteMaxPaths = null, int? alternativeRouteMaxWeightFactor = null, int? alternativeRouteMaxShareFactor = null)
        {
             ApiResponse<RouteResponse> localVarResponse = await RouteGetAsyncWithHttpInfo(point, pointsEncoded, key, locale, instructions, vehicle, elevation, calcPoints, pointHint, chDisable, weighting, edgeTraversal, algorithm, heading, headingPenalty, passThrough, roundTripDistance, roundTripSeed, alternativeRouteMaxPaths, alternativeRouteMaxWeightFactor, alternativeRouteMaxShareFactor);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Routing Request The GraphHopper Routing API allows to calculate route and implement navigation via the turn instructions
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="point">Specify multiple points for which the route should be calculated. The order is important. Specify at least two points.</param>
        /// <param name="pointsEncoded">IMPORTANT- TODO - currently you have to pass false for the swagger client - Have not found a way to force add a parameter. If &#x60;false&#x60; the coordinates in &#x60;point&#x60; and &#x60;snapped_waypoints&#x60; are returned as array using the order [lon,lat,elevation] for every point. If &#x60;true&#x60; the coordinates will be encoded as string leading to less bandwith usage. You&#39;ll need a special handling for the decoding of this string on the client-side. We provide open source code in [Java](https://github.com/graphhopper/graphhopper/blob/d70b63660ac5200b03c38ba3406b8f93976628a6/web/src/main/java/com/graphhopper/http/WebHelper.java#L43) and [JavaScript](https://github.com/graphhopper/graphhopper/blob/d70b63660ac5200b03c38ba3406b8f93976628a6/web/src/main/webapp/js/ghrequest.js#L139). It is especially important to use no 3rd party client if you set &#x60;elevation&#x3D;true&#x60;!</param>
        /// <param name="key">Get your key at graphhopper.com</param>
        /// <param name="locale">The locale of the resulting turn instructions. E.g. &#x60;pt_PT&#x60; for Portuguese or &#x60;de&#x60; for German (optional)</param>
        /// <param name="instructions">If instruction should be calculated and returned (optional)</param>
        /// <param name="vehicle">The vehicle for which the route should be calculated. Other vehicles are foot, small_truck, ... (optional)</param>
        /// <param name="elevation">If &#x60;true&#x60; a third dimension - the elevation - is included in the polyline or in the GeoJson. If enabled you have to use a modified version of the decoding method or set points_encoded to &#x60;false&#x60;. See the points_encoded attribute for more details. Additionally a request can fail if the vehicle does not support elevation. See the features object for every vehicle. (optional)</param>
        /// <param name="calcPoints">If the points for the route should be calculated at all printing out only distance and time. (optional)</param>
        /// <param name="pointHint">Optional parameter. Specifies a hint for each &#x60;point&#x60; parameter to prefer a certain street for the closest location lookup. E.g. if there is an address or house with two or more neighboring streets you can control for which street the closest location is looked up. (optional)</param>
        /// <param name="chDisable">Use this parameter in combination with one or more parameters of this table (optional)</param>
        /// <param name="weighting">Which kind of &#39;best&#39; route calculation you need. Other option is &#x60;shortest&#x60; (e.g. for &#x60;vehicle&#x3D;foot&#x60; or &#x60;bike&#x60;), &#x60;short_fastest&#x60; if time and distance is expensive e.g. for &#x60;vehicle&#x3D;truck&#x60; (optional)</param>
        /// <param name="edgeTraversal">Use &#x60;true&#x60; if you want to consider turn restrictions for bike and motor vehicles. Keep in mind that the response time is roughly 2 times slower. (optional)</param>
        /// <param name="algorithm">The algorithm to calculate the route. Other options are &#x60;dijkstra&#x60;, &#x60;astar&#x60;, &#x60;astarbi&#x60;, &#x60;alternative_route&#x60; and &#x60;round_trip&#x60; (optional)</param>
        /// <param name="heading">Favour a heading direction for a certain point. Specify either one heading for the start point or as many as there are points. In this case headings are associated by their order to the specific points. Headings are given as north based clockwise angle between 0 and 360 degree. This parameter also influences the tour generated with &#x60;algorithm&#x3D;round_trip&#x60; and force the initial direction. (optional)</param>
        /// <param name="headingPenalty">Penalty for omitting a specified heading. The penalty corresponds to the accepted time delay in seconds in comparison to the route without a heading. (optional)</param>
        /// <param name="passThrough">If &#x60;true&#x60; u-turns are avoided at via-points with regard to the &#x60;heading_penalty&#x60;. (optional)</param>
        /// <param name="roundTripDistance">If &#x60;algorithm&#x3D;round_trip&#x60; this parameter configures approximative length of the resulting round trip (optional)</param>
        /// <param name="roundTripSeed">If &#x60;algorithm&#x3D;round_trip&#x60; this parameter introduces randomness if e.g. the first try wasn&#39;t good. (optional)</param>
        /// <param name="alternativeRouteMaxPaths">If &#x60;algorithm&#x3D;alternative_route&#x60; this parameter sets the number of maximum paths which should be calculated. Increasing can lead to worse alternatives. (optional)</param>
        /// <param name="alternativeRouteMaxWeightFactor">If &#x60;algorithm&#x3D;alternative_route&#x60; this parameter sets the factor by which the alternatives routes can be longer than the optimal route. Increasing can lead to worse alternatives. (optional)</param>
        /// <param name="alternativeRouteMaxShareFactor">If &#x60;algorithm&#x3D;alternative_route&#x60; this parameter specifies how much alternatives routes can have maximum in common with the optimal route. Increasing can lead to worse alternatives. (optional)</param>
        /// <returns>Task of ApiResponse (RouteResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RouteResponse>> RouteGetAsyncWithHttpInfo (List<string> point, bool? pointsEncoded, string key, string locale = null, bool? instructions = null, string vehicle = null, bool? elevation = null, bool? calcPoints = null, List<string> pointHint = null, bool? chDisable = null, string weighting = null, bool? edgeTraversal = null, string algorithm = null, int? heading = null, int? headingPenalty = null, bool? passThrough = null, int? roundTripDistance = null, long? roundTripSeed = null, int? alternativeRouteMaxPaths = null, int? alternativeRouteMaxWeightFactor = null, int? alternativeRouteMaxShareFactor = null)
        {
            // verify the required parameter 'point' is set
            if (point == null)
                throw new ApiException(400, "Missing required parameter 'point' when calling RoutingApi->RouteGet");
            // verify the required parameter 'pointsEncoded' is set
            if (pointsEncoded == null)
                throw new ApiException(400, "Missing required parameter 'pointsEncoded' when calling RoutingApi->RouteGet");
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling RoutingApi->RouteGet");

            var localVarPath = "/route";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (point != null) localVarQueryParams.Add("point", Configuration.ApiClient.ParameterToString(point)); // query parameter
            if (locale != null) localVarQueryParams.Add("locale", Configuration.ApiClient.ParameterToString(locale)); // query parameter
            if (instructions != null) localVarQueryParams.Add("instructions", Configuration.ApiClient.ParameterToString(instructions)); // query parameter
            if (vehicle != null) localVarQueryParams.Add("vehicle", Configuration.ApiClient.ParameterToString(vehicle)); // query parameter
            if (elevation != null) localVarQueryParams.Add("elevation", Configuration.ApiClient.ParameterToString(elevation)); // query parameter
            if (pointsEncoded != null) localVarQueryParams.Add("points_encoded", Configuration.ApiClient.ParameterToString(pointsEncoded)); // query parameter
            if (calcPoints != null) localVarQueryParams.Add("calc_points", Configuration.ApiClient.ParameterToString(calcPoints)); // query parameter
            if (pointHint != null) localVarQueryParams.Add("point_hint", Configuration.ApiClient.ParameterToString(pointHint)); // query parameter
            if (chDisable != null) localVarQueryParams.Add("ch.disable", Configuration.ApiClient.ParameterToString(chDisable)); // query parameter
            if (weighting != null) localVarQueryParams.Add("weighting", Configuration.ApiClient.ParameterToString(weighting)); // query parameter
            if (edgeTraversal != null) localVarQueryParams.Add("edge_traversal", Configuration.ApiClient.ParameterToString(edgeTraversal)); // query parameter
            if (algorithm != null) localVarQueryParams.Add("algorithm", Configuration.ApiClient.ParameterToString(algorithm)); // query parameter
            if (heading != null) localVarQueryParams.Add("heading", Configuration.ApiClient.ParameterToString(heading)); // query parameter
            if (headingPenalty != null) localVarQueryParams.Add("heading_penalty", Configuration.ApiClient.ParameterToString(headingPenalty)); // query parameter
            if (passThrough != null) localVarQueryParams.Add("pass_through", Configuration.ApiClient.ParameterToString(passThrough)); // query parameter
            if (roundTripDistance != null) localVarQueryParams.Add("round_trip.distance", Configuration.ApiClient.ParameterToString(roundTripDistance)); // query parameter
            if (roundTripSeed != null) localVarQueryParams.Add("round_trip.seed", Configuration.ApiClient.ParameterToString(roundTripSeed)); // query parameter
            if (alternativeRouteMaxPaths != null) localVarQueryParams.Add("alternative_route.max_paths", Configuration.ApiClient.ParameterToString(alternativeRouteMaxPaths)); // query parameter
            if (alternativeRouteMaxWeightFactor != null) localVarQueryParams.Add("alternative_route.max_weight_factor", Configuration.ApiClient.ParameterToString(alternativeRouteMaxWeightFactor)); // query parameter
            if (alternativeRouteMaxShareFactor != null) localVarQueryParams.Add("alternative_route.max_share_factor", Configuration.ApiClient.ParameterToString(alternativeRouteMaxShareFactor)); // query parameter
            if (key != null) localVarQueryParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RouteGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RouteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RouteResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RouteResponse)));
        }

    }
}
