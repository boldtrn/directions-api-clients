/* 
 * GraphHopper Directions API
 *
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Vehicle
    /// </summary>
    [DataContract]
    public partial class Vehicle :  IEquatable<Vehicle>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Vehicle" /> class.
        /// </summary>
        /// <param name="VehicleId">Unique identifier of vehicle.</param>
        /// <param name="TypeId">Unique identifier referring to the available vehicle types.</param>
        /// <param name="StartAddress">StartAddress.</param>
        /// <param name="EndAddress">EndAddress.</param>
        /// <param name="_Break">_Break.</param>
        /// <param name="ReturnToDepot">Indicates whether vehicle should return to start address or not. If not, it can end at any service activity..</param>
        /// <param name="EarliestStart">earliest start of vehicle at its start location.</param>
        /// <param name="LatestEnd">latest end of vehicle at its end location.</param>
        /// <param name="Skills">array of skills.</param>
        /// <param name="MaxDistance">max distance of vehicle.</param>
        public Vehicle(string VehicleId = default(string), string TypeId = default(string), Address StartAddress = default(Address), Address EndAddress = default(Address), ModelBreak _Break = default(ModelBreak), bool? ReturnToDepot = default(bool?), long? EarliestStart = default(long?), long? LatestEnd = default(long?), List<string> Skills = default(List<string>), long? MaxDistance = default(long?))
        {
            this.VehicleId = VehicleId;
            this.TypeId = TypeId;
            this.StartAddress = StartAddress;
            this.EndAddress = EndAddress;
            this._Break = _Break;
            this.ReturnToDepot = ReturnToDepot;
            this.EarliestStart = EarliestStart;
            this.LatestEnd = LatestEnd;
            this.Skills = Skills;
            this.MaxDistance = MaxDistance;
        }
        
        /// <summary>
        /// Unique identifier of vehicle
        /// </summary>
        /// <value>Unique identifier of vehicle</value>
        [DataMember(Name="vehicle_id", EmitDefaultValue=false)]
        public string VehicleId { get; set; }

        /// <summary>
        /// Unique identifier referring to the available vehicle types
        /// </summary>
        /// <value>Unique identifier referring to the available vehicle types</value>
        [DataMember(Name="type_id", EmitDefaultValue=false)]
        public string TypeId { get; set; }

        /// <summary>
        /// Gets or Sets StartAddress
        /// </summary>
        [DataMember(Name="start_address", EmitDefaultValue=false)]
        public Address StartAddress { get; set; }

        /// <summary>
        /// Gets or Sets EndAddress
        /// </summary>
        [DataMember(Name="end_address", EmitDefaultValue=false)]
        public Address EndAddress { get; set; }

        /// <summary>
        /// Gets or Sets _Break
        /// </summary>
        [DataMember(Name="break", EmitDefaultValue=false)]
        public ModelBreak _Break { get; set; }

        /// <summary>
        /// Indicates whether vehicle should return to start address or not. If not, it can end at any service activity.
        /// </summary>
        /// <value>Indicates whether vehicle should return to start address or not. If not, it can end at any service activity.</value>
        [DataMember(Name="return_to_depot", EmitDefaultValue=false)]
        public bool? ReturnToDepot { get; set; }

        /// <summary>
        /// earliest start of vehicle at its start location
        /// </summary>
        /// <value>earliest start of vehicle at its start location</value>
        [DataMember(Name="earliest_start", EmitDefaultValue=false)]
        public long? EarliestStart { get; set; }

        /// <summary>
        /// latest end of vehicle at its end location
        /// </summary>
        /// <value>latest end of vehicle at its end location</value>
        [DataMember(Name="latest_end", EmitDefaultValue=false)]
        public long? LatestEnd { get; set; }

        /// <summary>
        /// array of skills
        /// </summary>
        /// <value>array of skills</value>
        [DataMember(Name="skills", EmitDefaultValue=false)]
        public List<string> Skills { get; set; }

        /// <summary>
        /// max distance of vehicle
        /// </summary>
        /// <value>max distance of vehicle</value>
        [DataMember(Name="max_distance", EmitDefaultValue=false)]
        public long? MaxDistance { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Vehicle {\n");
            sb.Append("  VehicleId: ").Append(VehicleId).Append("\n");
            sb.Append("  TypeId: ").Append(TypeId).Append("\n");
            sb.Append("  StartAddress: ").Append(StartAddress).Append("\n");
            sb.Append("  EndAddress: ").Append(EndAddress).Append("\n");
            sb.Append("  _Break: ").Append(_Break).Append("\n");
            sb.Append("  ReturnToDepot: ").Append(ReturnToDepot).Append("\n");
            sb.Append("  EarliestStart: ").Append(EarliestStart).Append("\n");
            sb.Append("  LatestEnd: ").Append(LatestEnd).Append("\n");
            sb.Append("  Skills: ").Append(Skills).Append("\n");
            sb.Append("  MaxDistance: ").Append(MaxDistance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Vehicle);
        }

        /// <summary>
        /// Returns true if Vehicle instances are equal
        /// </summary>
        /// <param name="other">Instance of Vehicle to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Vehicle other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.VehicleId == other.VehicleId ||
                    this.VehicleId != null &&
                    this.VehicleId.Equals(other.VehicleId)
                ) && 
                (
                    this.TypeId == other.TypeId ||
                    this.TypeId != null &&
                    this.TypeId.Equals(other.TypeId)
                ) && 
                (
                    this.StartAddress == other.StartAddress ||
                    this.StartAddress != null &&
                    this.StartAddress.Equals(other.StartAddress)
                ) && 
                (
                    this.EndAddress == other.EndAddress ||
                    this.EndAddress != null &&
                    this.EndAddress.Equals(other.EndAddress)
                ) && 
                (
                    this._Break == other._Break ||
                    this._Break != null &&
                    this._Break.Equals(other._Break)
                ) && 
                (
                    this.ReturnToDepot == other.ReturnToDepot ||
                    this.ReturnToDepot != null &&
                    this.ReturnToDepot.Equals(other.ReturnToDepot)
                ) && 
                (
                    this.EarliestStart == other.EarliestStart ||
                    this.EarliestStart != null &&
                    this.EarliestStart.Equals(other.EarliestStart)
                ) && 
                (
                    this.LatestEnd == other.LatestEnd ||
                    this.LatestEnd != null &&
                    this.LatestEnd.Equals(other.LatestEnd)
                ) && 
                (
                    this.Skills == other.Skills ||
                    this.Skills != null &&
                    this.Skills.SequenceEqual(other.Skills)
                ) && 
                (
                    this.MaxDistance == other.MaxDistance ||
                    this.MaxDistance != null &&
                    this.MaxDistance.Equals(other.MaxDistance)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.VehicleId != null)
                    hash = hash * 59 + this.VehicleId.GetHashCode();
                if (this.TypeId != null)
                    hash = hash * 59 + this.TypeId.GetHashCode();
                if (this.StartAddress != null)
                    hash = hash * 59 + this.StartAddress.GetHashCode();
                if (this.EndAddress != null)
                    hash = hash * 59 + this.EndAddress.GetHashCode();
                if (this._Break != null)
                    hash = hash * 59 + this._Break.GetHashCode();
                if (this.ReturnToDepot != null)
                    hash = hash * 59 + this.ReturnToDepot.GetHashCode();
                if (this.EarliestStart != null)
                    hash = hash * 59 + this.EarliestStart.GetHashCode();
                if (this.LatestEnd != null)
                    hash = hash * 59 + this.LatestEnd.GetHashCode();
                if (this.Skills != null)
                    hash = hash * 59 + this.Skills.GetHashCode();
                if (this.MaxDistance != null)
                    hash = hash * 59 + this.MaxDistance.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
