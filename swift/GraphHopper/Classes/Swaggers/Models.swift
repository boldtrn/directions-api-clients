// Models.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> AnyObject
}

public enum ErrorResponse : ErrorType {
    case Error(Int, NSData?, ErrorType)
}

public class Response<T> {
    public let statusCode: Int
    public let header: [String: String]
    public let body: T?

    public init(statusCode: Int, header: [String: String], body: T?) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: NSHTTPURLResponse, body: T?) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for (key, value) in rawHeader {
            header[key as! String] = value as? String
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

private var once = dispatch_once_t()
class Decoders {
    static private var decoders = Dictionary<String, ((AnyObject) -> AnyObject)>()

    static func addDecoder<T>(clazz clazz: T.Type, decoder: ((AnyObject) -> T)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0) as! AnyObject }
    }

    static func decode<T>(clazz clazz: [T].Type, source: AnyObject) -> [T] {
        let array = source as! [AnyObject]
        return array.map { Decoders.decode(clazz: T.self, source: $0) }
    }

    static func decode<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject) -> [Key:T] {
        let sourceDictionary = source as! [Key: AnyObject]
        var dictionary = [Key:T]()
        for (key, value) in sourceDictionary {
            dictionary[key] = Decoders.decode(clazz: T.self, source: value)
        }
        return dictionary
    }

    static func decode<T>(clazz clazz: T.Type, source: AnyObject) -> T {
        initialize()
        if T.self is Int32.Type && source is NSNumber {
            return source.intValue as! T;
        }
        if T.self is Int64.Type && source is NSNumber {
            return source.longLongValue as! T;
        }
        if T.self is NSUUID.Type && source is String {
            return NSUUID(UUIDString: source as! String) as! T
        }
        if source is T {
            return source as! T
        }
        if T.self is NSData.Type && source is String {
            return NSData(base64EncodedString: source as! String, options: NSDataBase64DecodingOptions()) as! T
        }

        let key = "\(T.self)"
        if let decoder = decoders[key] {
           return decoder(source) as! T
        } else {
            fatalError("Source \(source) is not convertible to type \(clazz): Maybe swagger file is insufficient")
        }
    }

    static func decodeOptional<T>(clazz clazz: T.Type, source: AnyObject?) -> T? {
        if source is NSNull {
            return nil
        }
        return source.map { (source: AnyObject) -> T in
            Decoders.decode(clazz: clazz, source: source)
        }
    }

    static func decodeOptional<T>(clazz clazz: [T].Type, source: AnyObject?) -> [T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static func decodeOptional<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject?) -> [Key:T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [Key:T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static private func initialize() {
        dispatch_once(&once) {
            let formatters = [
                "yyyy-MM-dd",
                "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss'Z'",
                "yyyy-MM-dd'T'HH:mm:ss.SSS"
            ].map { (format: String) -> NSDateFormatter in
                let formatter = NSDateFormatter()
                formatter.locale = NSLocale(localeIdentifier:"en_US_POSIX")
                formatter.dateFormat = format
                return formatter
            }
            // Decoder for NSDate
            Decoders.addDecoder(clazz: NSDate.self) { (source: AnyObject) -> NSDate in
               if let sourceString = source as? String {
                    for formatter in formatters {
                        if let date = formatter.dateFromString(sourceString) {
                            return date
                        }
                    }

                }
                if let sourceInt = source as? Int {
                    // treat as a java date
                    return NSDate(timeIntervalSince1970: Double(sourceInt / 1000) )
                }
                fatalError("formatter failed to parse \(source)")
            } 

            // Decoder for [Activity]
            Decoders.addDecoder(clazz: [Activity].self) { (source: AnyObject) -> [Activity] in
                return Decoders.decode(clazz: [Activity].self, source: source)
            }
            // Decoder for Activity
            Decoders.addDecoder(clazz: Activity.self) { (source: AnyObject) -> Activity in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Activity()
                instance.type = Activity.ModelType(rawValue: (sourceDictionary["type"] as? String) ?? "") 
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.locationId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["location_id"])
                instance.arrTime = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["arr_time"])
                instance.endTime = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["end_time"])
                instance.waitingTime = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["waiting_time"])
                instance.distance = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["distance"])
                instance.drivingTime = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["driving_time"])
                instance.loadBefore = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["load_before"])
                instance.loadAfter = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["load_after"])
                return instance
            }


            // Decoder for [Address]
            Decoders.addDecoder(clazz: [Address].self) { (source: AnyObject) -> [Address] in
                return Decoders.decode(clazz: [Address].self, source: source)
            }
            // Decoder for Address
            Decoders.addDecoder(clazz: Address.self) { (source: AnyObject) -> Address in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Address()
                instance.locationId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["location_id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.lon = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["lon"])
                instance.lat = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["lat"])
                return instance
            }


            // Decoder for [Algorithm]
            Decoders.addDecoder(clazz: [Algorithm].self) { (source: AnyObject) -> [Algorithm] in
                return Decoders.decode(clazz: [Algorithm].self, source: source)
            }
            // Decoder for Algorithm
            Decoders.addDecoder(clazz: Algorithm.self) { (source: AnyObject) -> Algorithm in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Algorithm()
                instance.problemType = Algorithm.ProblemType(rawValue: (sourceDictionary["problem_type"] as? String) ?? "") 
                instance.objective = Algorithm.Objective(rawValue: (sourceDictionary["objective"] as? String) ?? "") 
                return instance
            }


            // Decoder for [Break]
            Decoders.addDecoder(clazz: [Break].self) { (source: AnyObject) -> [Break] in
                return Decoders.decode(clazz: [Break].self, source: source)
            }
            // Decoder for Break
            Decoders.addDecoder(clazz: Break.self) { (source: AnyObject) -> Break in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Break()
                instance.earliest = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["earliest"])
                instance.latest = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["latest"])
                instance.duration = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["duration"])
                instance.maxDrivingTime = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["max_driving_time"])
                instance.initialDrivingTime = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["initial_driving_time"])
                instance.possibleSplit = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["possible_split"])
                return instance
            }


            // Decoder for [Configuration]
            Decoders.addDecoder(clazz: [Configuration].self) { (source: AnyObject) -> [Configuration] in
                return Decoders.decode(clazz: [Configuration].self, source: source)
            }
            // Decoder for Configuration
            Decoders.addDecoder(clazz: Configuration.self) { (source: AnyObject) -> Configuration in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Configuration()
                instance.routing = Decoders.decodeOptional(clazz: Routing.self, source: sourceDictionary["routing"])
                return instance
            }


            // Decoder for [CostMatrix]
            Decoders.addDecoder(clazz: [CostMatrix].self) { (source: AnyObject) -> [CostMatrix] in
                return Decoders.decode(clazz: [CostMatrix].self, source: source)
            }
            // Decoder for CostMatrix
            Decoders.addDecoder(clazz: CostMatrix.self) { (source: AnyObject) -> CostMatrix in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CostMatrix()
                instance.type = CostMatrix.ModelType(rawValue: (sourceDictionary["type"] as? String) ?? "") 
                instance.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"])
                instance.locationIds = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["location_ids"])
                instance.data = Decoders.decodeOptional(clazz: CostMatrixData.self, source: sourceDictionary["data"])
                instance.profile = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["profile"])
                return instance
            }


            // Decoder for [CostMatrixData]
            Decoders.addDecoder(clazz: [CostMatrixData].self) { (source: AnyObject) -> [CostMatrixData] in
                return Decoders.decode(clazz: [CostMatrixData].self, source: source)
            }
            // Decoder for CostMatrixData
            Decoders.addDecoder(clazz: CostMatrixData.self) { (source: AnyObject) -> CostMatrixData in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CostMatrixData()
                instance.times = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["times"])
                instance.distances = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["distances"])
                instance.info = Decoders.decodeOptional(clazz: CostMatrixDataInfo.self, source: sourceDictionary["info"])
                return instance
            }


            // Decoder for [CostMatrixDataInfo]
            Decoders.addDecoder(clazz: [CostMatrixDataInfo].self) { (source: AnyObject) -> [CostMatrixDataInfo] in
                return Decoders.decode(clazz: [CostMatrixDataInfo].self, source: source)
            }
            // Decoder for CostMatrixDataInfo
            Decoders.addDecoder(clazz: CostMatrixDataInfo.self) { (source: AnyObject) -> CostMatrixDataInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CostMatrixDataInfo()
                instance.copyrights = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["copyrights"])
                instance.took = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["took"])
                return instance
            }


            // Decoder for [GHError]
            Decoders.addDecoder(clazz: [GHError].self) { (source: AnyObject) -> [GHError] in
                return Decoders.decode(clazz: [GHError].self, source: source)
            }
            // Decoder for GHError
            Decoders.addDecoder(clazz: GHError.self) { (source: AnyObject) -> GHError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GHError()
                instance.code = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["code"])
                instance.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"])
                instance.hints = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["hints"])
                return instance
            }


            // Decoder for [GHErrorHints]
            Decoders.addDecoder(clazz: [GHErrorHints].self) { (source: AnyObject) -> [GHErrorHints] in
                return Decoders.decode(clazz: [GHErrorHints].self, source: source)
            }
            // Decoder for GHErrorHints
            Decoders.addDecoder(clazz: GHErrorHints.self) { (source: AnyObject) -> GHErrorHints in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GHErrorHints()
                instance.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"])
                return instance
            }


            // Decoder for [GeocodingLocation]
            Decoders.addDecoder(clazz: [GeocodingLocation].self) { (source: AnyObject) -> [GeocodingLocation] in
                return Decoders.decode(clazz: [GeocodingLocation].self, source: source)
            }
            // Decoder for GeocodingLocation
            Decoders.addDecoder(clazz: GeocodingLocation.self) { (source: AnyObject) -> GeocodingLocation in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GeocodingLocation()
                instance.point = Decoders.decodeOptional(clazz: GeocodingPoint.self, source: sourceDictionary["point"])
                instance.osmId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["osm_id"])
                instance.osmType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["osm_type"])
                instance.osmKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["osm_key"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.country = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country"])
                instance.city = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["city"])
                instance.state = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["state"])
                instance.street = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["street"])
                instance.housenumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["housenumber"])
                instance.postcode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["postcode"])
                return instance
            }


            // Decoder for [GeocodingPoint]
            Decoders.addDecoder(clazz: [GeocodingPoint].self) { (source: AnyObject) -> [GeocodingPoint] in
                return Decoders.decode(clazz: [GeocodingPoint].self, source: source)
            }
            // Decoder for GeocodingPoint
            Decoders.addDecoder(clazz: GeocodingPoint.self) { (source: AnyObject) -> GeocodingPoint in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GeocodingPoint()
                instance.lat = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["lat"])
                instance.lng = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["lng"])
                return instance
            }


            // Decoder for [GeocodingResponse]
            Decoders.addDecoder(clazz: [GeocodingResponse].self) { (source: AnyObject) -> [GeocodingResponse] in
                return Decoders.decode(clazz: [GeocodingResponse].self, source: source)
            }
            // Decoder for GeocodingResponse
            Decoders.addDecoder(clazz: GeocodingResponse.self) { (source: AnyObject) -> GeocodingResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GeocodingResponse()
                instance.hits = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["hits"])
                instance.locale = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["locale"])
                return instance
            }


            // Decoder for [IsochroneResponse]
            Decoders.addDecoder(clazz: [IsochroneResponse].self) { (source: AnyObject) -> [IsochroneResponse] in
                return Decoders.decode(clazz: [IsochroneResponse].self, source: source)
            }
            // Decoder for IsochroneResponse
            Decoders.addDecoder(clazz: IsochroneResponse.self) { (source: AnyObject) -> IsochroneResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = IsochroneResponse()
                instance.polygons = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["polygons"])
                instance.copyrights = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["copyrights"])
                return instance
            }


            // Decoder for [IsochroneResponsePolygon]
            Decoders.addDecoder(clazz: [IsochroneResponsePolygon].self) { (source: AnyObject) -> [IsochroneResponsePolygon] in
                return Decoders.decode(clazz: [IsochroneResponsePolygon].self, source: source)
            }
            // Decoder for IsochroneResponsePolygon
            Decoders.addDecoder(clazz: IsochroneResponsePolygon.self) { (source: AnyObject) -> IsochroneResponsePolygon in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = IsochroneResponsePolygon()
                instance.properties = Decoders.decodeOptional(clazz: IsochroneResponsePolygonProperties.self, source: sourceDictionary["properties"])
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                instance.geometry = Decoders.decodeOptional(clazz: IsochroneResponsePolygonGeometry.self, source: sourceDictionary["geometry"])
                return instance
            }


            // Decoder for [IsochroneResponsePolygonGeometry]
            Decoders.addDecoder(clazz: [IsochroneResponsePolygonGeometry].self) { (source: AnyObject) -> [IsochroneResponsePolygonGeometry] in
                return Decoders.decode(clazz: [IsochroneResponsePolygonGeometry].self, source: source)
            }
            // Decoder for IsochroneResponsePolygonGeometry
            Decoders.addDecoder(clazz: IsochroneResponsePolygonGeometry.self) { (source: AnyObject) -> IsochroneResponsePolygonGeometry in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = IsochroneResponsePolygonGeometry()
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                instance.coordinates = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["coordinates"])
                return instance
            }


            // Decoder for [IsochroneResponsePolygonProperties]
            Decoders.addDecoder(clazz: [IsochroneResponsePolygonProperties].self) { (source: AnyObject) -> [IsochroneResponsePolygonProperties] in
                return Decoders.decode(clazz: [IsochroneResponsePolygonProperties].self, source: source)
            }
            // Decoder for IsochroneResponsePolygonProperties
            Decoders.addDecoder(clazz: IsochroneResponsePolygonProperties.self) { (source: AnyObject) -> IsochroneResponsePolygonProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = IsochroneResponsePolygonProperties()
                instance.bucket = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["bucket"])
                return instance
            }


            // Decoder for [JobId]
            Decoders.addDecoder(clazz: [JobId].self) { (source: AnyObject) -> [JobId] in
                return Decoders.decode(clazz: [JobId].self, source: source)
            }
            // Decoder for JobId
            Decoders.addDecoder(clazz: JobId.self) { (source: AnyObject) -> JobId in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = JobId()
                instance.jobId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["job_id"])
                return instance
            }


            // Decoder for [Location]
            Decoders.addDecoder(clazz: [Location].self) { (source: AnyObject) -> [Location] in
                return Decoders.decode(clazz: [Location].self, source: source)
            }
            // Decoder for Location
            Decoders.addDecoder(clazz: Location.self) { (source: AnyObject) -> Location in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Location()
                instance.lon = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["lon"])
                instance.lat = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["lat"])
                return instance
            }


            // Decoder for [MatrixRequest]
            Decoders.addDecoder(clazz: [MatrixRequest].self) { (source: AnyObject) -> [MatrixRequest] in
                return Decoders.decode(clazz: [MatrixRequest].self, source: source)
            }
            // Decoder for MatrixRequest
            Decoders.addDecoder(clazz: MatrixRequest.self) { (source: AnyObject) -> MatrixRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MatrixRequest()
                instance.points = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["points"])
                instance.fromPoints = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["from_points"])
                instance.toPoints = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["to_points"])
                instance.outArrays = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["out_arrays"])
                instance.vehicle = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["vehicle"])
                return instance
            }


            // Decoder for [MatrixResponse]
            Decoders.addDecoder(clazz: [MatrixResponse].self) { (source: AnyObject) -> [MatrixResponse] in
                return Decoders.decode(clazz: [MatrixResponse].self, source: source)
            }
            // Decoder for MatrixResponse
            Decoders.addDecoder(clazz: MatrixResponse.self) { (source: AnyObject) -> MatrixResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MatrixResponse()
                instance.distances = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["distances"])
                instance.times = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["times"])
                instance.weights = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["weights"])
                instance.info = Decoders.decodeOptional(clazz: ResponseInfo.self, source: sourceDictionary["info"])
                return instance
            }


            // Decoder for [Objective]
            Decoders.addDecoder(clazz: [Objective].self) { (source: AnyObject) -> [Objective] in
                return Decoders.decode(clazz: [Objective].self, source: source)
            }
            // Decoder for Objective
            Decoders.addDecoder(clazz: Objective.self) { (source: AnyObject) -> Objective in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Objective()
                instance.type = Objective.ModelType(rawValue: (sourceDictionary["type"] as? String) ?? "") 
                instance.value = Objective.Value(rawValue: (sourceDictionary["value"] as? String) ?? "") 
                return instance
            }


            // Decoder for [Relation]
            Decoders.addDecoder(clazz: [Relation].self) { (source: AnyObject) -> [Relation] in
                return Decoders.decode(clazz: [Relation].self, source: source)
            }
            // Decoder for Relation
            Decoders.addDecoder(clazz: Relation.self) { (source: AnyObject) -> Relation in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Relation()
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                instance.ids = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["ids"])
                instance.vehicleId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["vehicle_id"])
                return instance
            }


            // Decoder for [Request]
            Decoders.addDecoder(clazz: [Request].self) { (source: AnyObject) -> [Request] in
                return Decoders.decode(clazz: [Request].self, source: source)
            }
            // Decoder for Request
            Decoders.addDecoder(clazz: Request.self) { (source: AnyObject) -> Request in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Request()
                instance.vehicles = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["vehicles"])
                instance.vehicleTypes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["vehicle_types"])
                instance.services = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["services"])
                instance.shipments = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["shipments"])
                instance.relations = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["relations"])
                instance.algorithm = Decoders.decodeOptional(clazz: Algorithm.self, source: sourceDictionary["algorithm"])
                instance.objectives = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["objectives"])
                instance.costMatrices = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["cost_matrices"])
                instance.configuration = Decoders.decodeOptional(clazz: Configuration.self, source: sourceDictionary["configuration"])
                return instance
            }


            // Decoder for [Response]
            Decoders.addDecoder(clazz: [Response].self) { (source: AnyObject) -> [Response] in
                return Decoders.decode(clazz: [Response].self, source: source)
            }
            // Decoder for Response
            Decoders.addDecoder(clazz: Response.self) { (source: AnyObject) -> Response in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Response()
                instance.copyrights = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["copyrights"])
                instance.jobId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["job_id"])
                instance.status = Response.Status(rawValue: (sourceDictionary["status"] as? String) ?? "") 
                instance.waitingInQueue = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["waiting_in_queue"])
                instance.processingTime = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["processing_time"])
                instance.solution = Decoders.decodeOptional(clazz: Solution.self, source: sourceDictionary["solution"])
                return instance
            }


            // Decoder for [ResponseCoordinates]
            Decoders.addDecoder(clazz: [ResponseCoordinates].self) { (source: AnyObject) -> [ResponseCoordinates] in
                return Decoders.decode(clazz: [ResponseCoordinates].self, source: source)
            }
            // Decoder for ResponseCoordinates
            Decoders.addDecoder(clazz: ResponseCoordinates.self) { (source: AnyObject) -> ResponseCoordinates in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ResponseCoordinates()
                instance.coordinates = Decoders.decodeOptional(clazz: ResponseCoordinatesArray.self, source: sourceDictionary["coordinates"])
                return instance
            }


            // Decoder for [ResponseCoordinatesArray]
            Decoders.addDecoder(clazz: [ResponseCoordinatesArray].self) { (source: AnyObject) -> [ResponseCoordinatesArray] in
                return Decoders.decode(clazz: [ResponseCoordinatesArray].self, source: source)
            }
            // Decoder for ResponseCoordinatesArray
            Decoders.addDecoder(clazz: ResponseCoordinatesArray.self) { (source: AnyObject) -> ResponseCoordinatesArray in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ResponseCoordinatesArray()
                return instance
            }


            // Decoder for [ResponseInfo]
            Decoders.addDecoder(clazz: [ResponseInfo].self) { (source: AnyObject) -> [ResponseInfo] in
                return Decoders.decode(clazz: [ResponseInfo].self, source: source)
            }
            // Decoder for ResponseInfo
            Decoders.addDecoder(clazz: ResponseInfo.self) { (source: AnyObject) -> ResponseInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ResponseInfo()
                instance.copyrights = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["copyrights"])
                instance.took = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["took"])
                return instance
            }


            // Decoder for [ResponseInstruction]
            Decoders.addDecoder(clazz: [ResponseInstruction].self) { (source: AnyObject) -> [ResponseInstruction] in
                return Decoders.decode(clazz: [ResponseInstruction].self, source: source)
            }
            // Decoder for ResponseInstruction
            Decoders.addDecoder(clazz: ResponseInstruction.self) { (source: AnyObject) -> ResponseInstruction in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ResponseInstruction()
                instance.text = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["text"])
                instance.streetName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["street_name"])
                instance.distance = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["distance"])
                instance.time = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["time"])
                instance.interval = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["interval"])
                instance.sign = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["sign"])
                instance.annotationText = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["annotation_text"])
                instance.annotationImportance = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["annotation_importance"])
                instance.exitNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["exit_number"])
                instance.turnAngle = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["turn_angle"])
                return instance
            }


            // Decoder for [ResponseInstructions]
            Decoders.addDecoder(clazz: [ResponseInstructions].self) { (source: AnyObject) -> [ResponseInstructions] in
                return Decoders.decode(clazz: [ResponseInstructions].self, source: source)
            }
            // Decoder for ResponseInstructions
            Decoders.addDecoder(clazz: ResponseInstructions.self) { (source: AnyObject) -> ResponseInstructions in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ResponseInstructions()
                return instance
            }


            // Decoder for [Route]
            Decoders.addDecoder(clazz: [Route].self) { (source: AnyObject) -> [Route] in
                return Decoders.decode(clazz: [Route].self, source: source)
            }
            // Decoder for Route
            Decoders.addDecoder(clazz: Route.self) { (source: AnyObject) -> Route in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Route()
                instance.vehicleId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["vehicle_id"])
                instance.distance = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["distance"])
                instance.transportTime = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["transport_time"])
                instance.completionTime = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["completion_time"])
                instance.waitingTime = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["waiting_time"])
                instance.activities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["activities"])
                instance.points = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["points"])
                return instance
            }


            // Decoder for [RoutePoint]
            Decoders.addDecoder(clazz: [RoutePoint].self) { (source: AnyObject) -> [RoutePoint] in
                return Decoders.decode(clazz: [RoutePoint].self, source: source)
            }
            // Decoder for RoutePoint
            Decoders.addDecoder(clazz: RoutePoint.self) { (source: AnyObject) -> RoutePoint in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RoutePoint()
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                instance.coordinates = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["coordinates"])
                return instance
            }


            // Decoder for [RouteResponse]
            Decoders.addDecoder(clazz: [RouteResponse].self) { (source: AnyObject) -> [RouteResponse] in
                return Decoders.decode(clazz: [RouteResponse].self, source: source)
            }
            // Decoder for RouteResponse
            Decoders.addDecoder(clazz: RouteResponse.self) { (source: AnyObject) -> RouteResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RouteResponse()
                instance.paths = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["paths"])
                instance.info = Decoders.decodeOptional(clazz: ResponseInfo.self, source: sourceDictionary["info"])
                return instance
            }


            // Decoder for [RouteResponsePath]
            Decoders.addDecoder(clazz: [RouteResponsePath].self) { (source: AnyObject) -> [RouteResponsePath] in
                return Decoders.decode(clazz: [RouteResponsePath].self, source: source)
            }
            // Decoder for RouteResponsePath
            Decoders.addDecoder(clazz: RouteResponsePath.self) { (source: AnyObject) -> RouteResponsePath in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RouteResponsePath()
                instance.distance = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["distance"])
                instance.time = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["time"])
                instance.ascend = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["ascend"])
                instance.descend = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["descend"])
                instance.points = Decoders.decodeOptional(clazz: ResponseCoordinates.self, source: sourceDictionary["points"])
                instance.pointsEncoded = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["points_encoded"])
                instance.bbox = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["bbox"])
                instance.snappedWaypoints = Decoders.decodeOptional(clazz: ResponseCoordinates.self, source: sourceDictionary["snapped_waypoints"])
                instance.instructions = Decoders.decodeOptional(clazz: ResponseInstructions.self, source: sourceDictionary["instructions"])
                return instance
            }


            // Decoder for [Routing]
            Decoders.addDecoder(clazz: [Routing].self) { (source: AnyObject) -> [Routing] in
                return Decoders.decode(clazz: [Routing].self, source: source)
            }
            // Decoder for Routing
            Decoders.addDecoder(clazz: Routing.self) { (source: AnyObject) -> Routing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Routing()
                instance.calcPoints = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["calc_points"])
                return instance
            }


            // Decoder for [Service]
            Decoders.addDecoder(clazz: [Service].self) { (source: AnyObject) -> [Service] in
                return Decoders.decode(clazz: [Service].self, source: source)
            }
            // Decoder for Service
            Decoders.addDecoder(clazz: Service.self) { (source: AnyObject) -> Service in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Service()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.type = Service.ModelType(rawValue: (sourceDictionary["type"] as? String) ?? "") 
                instance.priority = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["priority"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.address = Decoders.decodeOptional(clazz: Address.self, source: sourceDictionary["address"])
                instance.duration = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["duration"])
                instance.preparationTime = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["preparation_time"])
                instance.timeWindows = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["time_windows"])
                instance.size = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["size"])
                instance.requiredSkills = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["required_skills"])
                instance.allowedVehicles = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["allowed_vehicles"])
                return instance
            }


            // Decoder for [Shipment]
            Decoders.addDecoder(clazz: [Shipment].self) { (source: AnyObject) -> [Shipment] in
                return Decoders.decode(clazz: [Shipment].self, source: source)
            }
            // Decoder for Shipment
            Decoders.addDecoder(clazz: Shipment.self) { (source: AnyObject) -> Shipment in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Shipment()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.priority = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["priority"])
                instance.pickup = Decoders.decodeOptional(clazz: Stop.self, source: sourceDictionary["pickup"])
                instance.delivery = Decoders.decodeOptional(clazz: Stop.self, source: sourceDictionary["delivery"])
                instance.size = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["size"])
                instance.requiredSkills = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["required_skills"])
                instance.allowedVehicles = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["allowed_vehicles"])
                return instance
            }


            // Decoder for [Solution]
            Decoders.addDecoder(clazz: [Solution].self) { (source: AnyObject) -> [Solution] in
                return Decoders.decode(clazz: [Solution].self, source: source)
            }
            // Decoder for Solution
            Decoders.addDecoder(clazz: Solution.self) { (source: AnyObject) -> Solution in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Solution()
                instance.costs = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["costs"])
                instance.distance = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["distance"])
                instance.time = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["time"])
                instance.transportTime = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["transport_time"])
                instance.maxOperationTime = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["max_operation_time"])
                instance.waitingTime = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["waiting_time"])
                instance.noVehicles = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["no_vehicles"])
                instance.noUnassigned = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["no_unassigned"])
                instance.routes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["routes"])
                instance.unassigned = Decoders.decodeOptional(clazz: SolutionUnassigned.self, source: sourceDictionary["unassigned"])
                return instance
            }


            // Decoder for [SolutionUnassigned]
            Decoders.addDecoder(clazz: [SolutionUnassigned].self) { (source: AnyObject) -> [SolutionUnassigned] in
                return Decoders.decode(clazz: [SolutionUnassigned].self, source: source)
            }
            // Decoder for SolutionUnassigned
            Decoders.addDecoder(clazz: SolutionUnassigned.self) { (source: AnyObject) -> SolutionUnassigned in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SolutionUnassigned()
                instance.services = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["services"])
                instance.shipments = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["shipments"])
                return instance
            }


            // Decoder for [Stop]
            Decoders.addDecoder(clazz: [Stop].self) { (source: AnyObject) -> [Stop] in
                return Decoders.decode(clazz: [Stop].self, source: source)
            }
            // Decoder for Stop
            Decoders.addDecoder(clazz: Stop.self) { (source: AnyObject) -> Stop in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Stop()
                instance.address = Decoders.decodeOptional(clazz: Address.self, source: sourceDictionary["address"])
                instance.duration = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["duration"])
                instance.preparationTime = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["preparation_time"])
                instance.timeWindows = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["time_windows"])
                return instance
            }


            // Decoder for [TimeWindow]
            Decoders.addDecoder(clazz: [TimeWindow].self) { (source: AnyObject) -> [TimeWindow] in
                return Decoders.decode(clazz: [TimeWindow].self, source: source)
            }
            // Decoder for TimeWindow
            Decoders.addDecoder(clazz: TimeWindow.self) { (source: AnyObject) -> TimeWindow in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TimeWindow()
                instance.earliest = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["earliest"])
                instance.latest = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["latest"])
                return instance
            }


            // Decoder for [Vehicle]
            Decoders.addDecoder(clazz: [Vehicle].self) { (source: AnyObject) -> [Vehicle] in
                return Decoders.decode(clazz: [Vehicle].self, source: source)
            }
            // Decoder for Vehicle
            Decoders.addDecoder(clazz: Vehicle.self) { (source: AnyObject) -> Vehicle in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Vehicle()
                instance.vehicleId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["vehicle_id"])
                instance.typeId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type_id"])
                instance.startAddress = Decoders.decodeOptional(clazz: Address.self, source: sourceDictionary["start_address"])
                instance.endAddress = Decoders.decodeOptional(clazz: Address.self, source: sourceDictionary["end_address"])
                instance._break = Decoders.decodeOptional(clazz: Break.self, source: sourceDictionary["break"])
                instance.returnToDepot = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["return_to_depot"])
                instance.earliestStart = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["earliest_start"])
                instance.latestEnd = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["latest_end"])
                instance.skills = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["skills"])
                instance.maxDistance = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["max_distance"])
                return instance
            }


            // Decoder for [VehicleType]
            Decoders.addDecoder(clazz: [VehicleType].self) { (source: AnyObject) -> [VehicleType] in
                return Decoders.decode(clazz: [VehicleType].self, source: source)
            }
            // Decoder for VehicleType
            Decoders.addDecoder(clazz: VehicleType.self) { (source: AnyObject) -> VehicleType in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = VehicleType()
                instance.typeId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type_id"])
                instance.profile = VehicleType.Profile(rawValue: (sourceDictionary["profile"] as? String) ?? "") 
                instance.capacity = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["capacity"])
                instance.speedFactor = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["speed_factor"])
                instance.serviceTimeFactor = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["service_time_factor"])
                instance.costPerMeter = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["cost_per_meter"])
                instance.costPerSecond = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["cost_per_second"])
                instance.costPerActivation = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["cost_per_activation"])
                return instance
            }
        }
    }
}
