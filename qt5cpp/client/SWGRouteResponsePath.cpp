/**
 * GraphHopper Directions API
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGRouteResponsePath.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {

SWGRouteResponsePath::SWGRouteResponsePath(QString* json) {
    init();
    this->fromJson(*json);
}

SWGRouteResponsePath::SWGRouteResponsePath() {
    init();
}

SWGRouteResponsePath::~SWGRouteResponsePath() {
    this->cleanup();
}

void
SWGRouteResponsePath::init() {
    distance = 0.0;
    time = 0L;
    ascend = 0.0;
    descend = 0.0;
    points = new SWGResponseCoordinates();
    points_encoded = false;
    bbox = new QList<double>();
    snapped_waypoints = new SWGResponseCoordinates();
    instructions = new SWGResponseInstructions();
}

void
SWGRouteResponsePath::cleanup() {
    




    if(points != nullptr) {
        delete points;
    }



    if(snapped_waypoints != nullptr) {
        delete snapped_waypoints;
    }

    if(instructions != nullptr) {
        delete instructions;
    }
}

SWGRouteResponsePath*
SWGRouteResponsePath::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGRouteResponsePath::fromJsonObject(QJsonObject &pJson) {
    ::Swagger::setValue(&distance, pJson["distance"], "double", "");
    ::Swagger::setValue(&time, pJson["time"], "qint64", "");
    ::Swagger::setValue(&ascend, pJson["ascend"], "double", "");
    ::Swagger::setValue(&descend, pJson["descend"], "double", "");
    ::Swagger::setValue(&points, pJson["points"], "SWGResponseCoordinates", "SWGResponseCoordinates");
    ::Swagger::setValue(&points_encoded, pJson["points_encoded"], "bool", "");
    
    
    ::Swagger::setValue(&bbox, pJson["bbox"], "QList", "double");
    ::Swagger::setValue(&snapped_waypoints, pJson["snapped_waypoints"], "SWGResponseCoordinates", "SWGResponseCoordinates");
    ::Swagger::setValue(&instructions, pJson["instructions"], "SWGResponseInstructions", "SWGResponseInstructions");
}

QString
SWGRouteResponsePath::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
SWGRouteResponsePath::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    
    obj->insert("distance", QJsonValue(distance));

    obj->insert("time", QJsonValue(time));

    obj->insert("ascend", QJsonValue(ascend));

    obj->insert("descend", QJsonValue(descend));

    toJsonValue(QString("points"), points, obj, QString("SWGResponseCoordinates"));

    obj->insert("points_encoded", QJsonValue(points_encoded));

    QJsonArray bboxJsonArray;
    toJsonArray((QList<void*>*)bbox, &bboxJsonArray, "bbox", "double");
    obj->insert("bbox", bboxJsonArray);

    toJsonValue(QString("snapped_waypoints"), snapped_waypoints, obj, QString("SWGResponseCoordinates"));

    toJsonValue(QString("instructions"), instructions, obj, QString("SWGResponseInstructions"));

    return obj;
}

double
SWGRouteResponsePath::getDistance() {
    return distance;
}
void
SWGRouteResponsePath::setDistance(double distance) {
    this->distance = distance;
}

qint64
SWGRouteResponsePath::getTime() {
    return time;
}
void
SWGRouteResponsePath::setTime(qint64 time) {
    this->time = time;
}

double
SWGRouteResponsePath::getAscend() {
    return ascend;
}
void
SWGRouteResponsePath::setAscend(double ascend) {
    this->ascend = ascend;
}

double
SWGRouteResponsePath::getDescend() {
    return descend;
}
void
SWGRouteResponsePath::setDescend(double descend) {
    this->descend = descend;
}

SWGResponseCoordinates*
SWGRouteResponsePath::getPoints() {
    return points;
}
void
SWGRouteResponsePath::setPoints(SWGResponseCoordinates* points) {
    this->points = points;
}

bool
SWGRouteResponsePath::getPointsEncoded() {
    return points_encoded;
}
void
SWGRouteResponsePath::setPointsEncoded(bool points_encoded) {
    this->points_encoded = points_encoded;
}

QList<double>*
SWGRouteResponsePath::getBbox() {
    return bbox;
}
void
SWGRouteResponsePath::setBbox(QList<double>* bbox) {
    this->bbox = bbox;
}

SWGResponseCoordinates*
SWGRouteResponsePath::getSnappedWaypoints() {
    return snapped_waypoints;
}
void
SWGRouteResponsePath::setSnappedWaypoints(SWGResponseCoordinates* snapped_waypoints) {
    this->snapped_waypoints = snapped_waypoints;
}

SWGResponseInstructions*
SWGRouteResponsePath::getInstructions() {
    return instructions;
}
void
SWGRouteResponsePath::setInstructions(SWGResponseInstructions* instructions) {
    this->instructions = instructions;
}


}

