/**
 * GraphHopper Directions API
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGVehicleType.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {

SWGVehicleType::SWGVehicleType(QString* json) {
    init();
    this->fromJson(*json);
}

SWGVehicleType::SWGVehicleType() {
    init();
}

SWGVehicleType::~SWGVehicleType() {
    this->cleanup();
}

void
SWGVehicleType::init() {
    type_id = new QString("");
    profile = new QString("");
    capacity = new QList<qint32>();
    speed_factor = 0.0;
    service_time_factor = 0.0;
    cost_per_meter = 0.0;
    cost_per_second = 0.0;
    cost_per_activation = 0.0;
}

void
SWGVehicleType::cleanup() {
    
    if(type_id != nullptr) {
        delete type_id;
    }

    if(profile != nullptr) {
        delete profile;
    }






}

SWGVehicleType*
SWGVehicleType::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGVehicleType::fromJsonObject(QJsonObject &pJson) {
    ::Swagger::setValue(&type_id, pJson["type_id"], "QString", "QString");
    ::Swagger::setValue(&profile, pJson["profile"], "QString", "QString");
    
    
    ::Swagger::setValue(&capacity, pJson["capacity"], "QList", "qint32");
    ::Swagger::setValue(&speed_factor, pJson["speed_factor"], "double", "");
    ::Swagger::setValue(&service_time_factor, pJson["service_time_factor"], "double", "");
    ::Swagger::setValue(&cost_per_meter, pJson["cost_per_meter"], "double", "");
    ::Swagger::setValue(&cost_per_second, pJson["cost_per_second"], "double", "");
    ::Swagger::setValue(&cost_per_activation, pJson["cost_per_activation"], "double", "");
}

QString
SWGVehicleType::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
SWGVehicleType::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    
    toJsonValue(QString("type_id"), type_id, obj, QString("QString"));

    toJsonValue(QString("profile"), profile, obj, QString("QString"));

    QJsonArray capacityJsonArray;
    toJsonArray((QList<void*>*)capacity, &capacityJsonArray, "capacity", "qint32");
    obj->insert("capacity", capacityJsonArray);

    obj->insert("speed_factor", QJsonValue(speed_factor));

    obj->insert("service_time_factor", QJsonValue(service_time_factor));

    obj->insert("cost_per_meter", QJsonValue(cost_per_meter));

    obj->insert("cost_per_second", QJsonValue(cost_per_second));

    obj->insert("cost_per_activation", QJsonValue(cost_per_activation));

    return obj;
}

QString*
SWGVehicleType::getTypeId() {
    return type_id;
}
void
SWGVehicleType::setTypeId(QString* type_id) {
    this->type_id = type_id;
}

QString*
SWGVehicleType::getProfile() {
    return profile;
}
void
SWGVehicleType::setProfile(QString* profile) {
    this->profile = profile;
}

QList<qint32>*
SWGVehicleType::getCapacity() {
    return capacity;
}
void
SWGVehicleType::setCapacity(QList<qint32>* capacity) {
    this->capacity = capacity;
}

double
SWGVehicleType::getSpeedFactor() {
    return speed_factor;
}
void
SWGVehicleType::setSpeedFactor(double speed_factor) {
    this->speed_factor = speed_factor;
}

double
SWGVehicleType::getServiceTimeFactor() {
    return service_time_factor;
}
void
SWGVehicleType::setServiceTimeFactor(double service_time_factor) {
    this->service_time_factor = service_time_factor;
}

double
SWGVehicleType::getCostPerMeter() {
    return cost_per_meter;
}
void
SWGVehicleType::setCostPerMeter(double cost_per_meter) {
    this->cost_per_meter = cost_per_meter;
}

double
SWGVehicleType::getCostPerSecond() {
    return cost_per_second;
}
void
SWGVehicleType::setCostPerSecond(double cost_per_second) {
    this->cost_per_second = cost_per_second;
}

double
SWGVehicleType::getCostPerActivation() {
    return cost_per_activation;
}
void
SWGVehicleType::setCostPerActivation(double cost_per_activation) {
    this->cost_per_activation = cost_per_activation;
}


}

