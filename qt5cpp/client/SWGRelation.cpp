/**
 * GraphHopper Directions API
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGRelation.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {

SWGRelation::SWGRelation(QString* json) {
    init();
    this->fromJson(*json);
}

SWGRelation::SWGRelation() {
    init();
}

SWGRelation::~SWGRelation() {
    this->cleanup();
}

void
SWGRelation::init() {
    type = new QString("");
    ids = new QList<QString*>();
    vehicle_id = new QString("");
}

void
SWGRelation::cleanup() {
    
    if(type != nullptr) {
        delete type;
    }

    if(ids != nullptr) {
        QList<QString*>* arr = ids;
        foreach(QString* o, *arr) {
            delete o;
        }
        delete ids;
    }

    if(vehicle_id != nullptr) {
        delete vehicle_id;
    }
}

SWGRelation*
SWGRelation::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGRelation::fromJsonObject(QJsonObject &pJson) {
    ::Swagger::setValue(&type, pJson["type"], "QString", "QString");
    
    ::Swagger::setValue(&ids, pJson["ids"], "QList", "QString");
    
    ::Swagger::setValue(&vehicle_id, pJson["vehicle_id"], "QString", "QString");
}

QString
SWGRelation::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
SWGRelation::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    
    toJsonValue(QString("type"), type, obj, QString("QString"));

    QJsonArray idsJsonArray;
    toJsonArray((QList<void*>*)ids, &idsJsonArray, "ids", "QString");
    obj->insert("ids", idsJsonArray);

    toJsonValue(QString("vehicle_id"), vehicle_id, obj, QString("QString"));

    return obj;
}

QString*
SWGRelation::getType() {
    return type;
}
void
SWGRelation::setType(QString* type) {
    this->type = type;
}

QList<QString*>*
SWGRelation::getIds() {
    return ids;
}
void
SWGRelation::setIds(QList<QString*>* ids) {
    this->ids = ids;
}

QString*
SWGRelation::getVehicleId() {
    return vehicle_id;
}
void
SWGRelation::setVehicleId(QString* vehicle_id) {
    this->vehicle_id = vehicle_id;
}


}

