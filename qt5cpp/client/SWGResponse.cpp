/**
 * GraphHopper Directions API
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGResponse.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {

SWGResponse::SWGResponse(QString* json) {
    init();
    this->fromJson(*json);
}

SWGResponse::SWGResponse() {
    init();
}

SWGResponse::~SWGResponse() {
    this->cleanup();
}

void
SWGResponse::init() {
    copyrights = new QList<QString*>();
    job_id = new QString("");
    status = new QString("");
    waiting_in_queue = 0L;
    processing_time = 0L;
    solution = new SWGSolution();
}

void
SWGResponse::cleanup() {
    
    if(copyrights != nullptr) {
        QList<QString*>* arr = copyrights;
        foreach(QString* o, *arr) {
            delete o;
        }
        delete copyrights;
    }

    if(job_id != nullptr) {
        delete job_id;
    }

    if(status != nullptr) {
        delete status;
    }



    if(solution != nullptr) {
        delete solution;
    }
}

SWGResponse*
SWGResponse::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGResponse::fromJsonObject(QJsonObject &pJson) {
    
    ::Swagger::setValue(&copyrights, pJson["copyrights"], "QList", "QString");
    
    ::Swagger::setValue(&job_id, pJson["job_id"], "QString", "QString");
    ::Swagger::setValue(&status, pJson["status"], "QString", "QString");
    ::Swagger::setValue(&waiting_in_queue, pJson["waiting_in_queue"], "qint64", "");
    ::Swagger::setValue(&processing_time, pJson["processing_time"], "qint64", "");
    ::Swagger::setValue(&solution, pJson["solution"], "SWGSolution", "SWGSolution");
}

QString
SWGResponse::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
SWGResponse::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    
    QJsonArray copyrightsJsonArray;
    toJsonArray((QList<void*>*)copyrights, &copyrightsJsonArray, "copyrights", "QString");
    obj->insert("copyrights", copyrightsJsonArray);

    toJsonValue(QString("job_id"), job_id, obj, QString("QString"));

    toJsonValue(QString("status"), status, obj, QString("QString"));

    obj->insert("waiting_in_queue", QJsonValue(waiting_in_queue));

    obj->insert("processing_time", QJsonValue(processing_time));

    toJsonValue(QString("solution"), solution, obj, QString("SWGSolution"));

    return obj;
}

QList<QString*>*
SWGResponse::getCopyrights() {
    return copyrights;
}
void
SWGResponse::setCopyrights(QList<QString*>* copyrights) {
    this->copyrights = copyrights;
}

QString*
SWGResponse::getJobId() {
    return job_id;
}
void
SWGResponse::setJobId(QString* job_id) {
    this->job_id = job_id;
}

QString*
SWGResponse::getStatus() {
    return status;
}
void
SWGResponse::setStatus(QString* status) {
    this->status = status;
}

qint64
SWGResponse::getWaitingInQueue() {
    return waiting_in_queue;
}
void
SWGResponse::setWaitingInQueue(qint64 waiting_in_queue) {
    this->waiting_in_queue = waiting_in_queue;
}

qint64
SWGResponse::getProcessingTime() {
    return processing_time;
}
void
SWGResponse::setProcessingTime(qint64 processing_time) {
    this->processing_time = processing_time;
}

SWGSolution*
SWGResponse::getSolution() {
    return solution;
}
void
SWGResponse::setSolution(SWGSolution* solution) {
    this->solution = solution;
}


}

