/**
 * GraphHopper Directions API
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGShipment.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {

SWGShipment::SWGShipment(QString* json) {
    init();
    this->fromJson(*json);
}

SWGShipment::SWGShipment() {
    init();
}

SWGShipment::~SWGShipment() {
    this->cleanup();
}

void
SWGShipment::init() {
    id = new QString("");
    name = new QString("");
    priority = 0;
    pickup = new SWGStop();
    delivery = new SWGStop();
    size = new QList<qint32>();
    required_skills = new QList<QString*>();
    allowed_vehicles = new QList<QString*>();
}

void
SWGShipment::cleanup() {
    
    if(id != nullptr) {
        delete id;
    }

    if(name != nullptr) {
        delete name;
    }


    if(pickup != nullptr) {
        delete pickup;
    }

    if(delivery != nullptr) {
        delete delivery;
    }


    if(required_skills != nullptr) {
        QList<QString*>* arr = required_skills;
        foreach(QString* o, *arr) {
            delete o;
        }
        delete required_skills;
    }

    if(allowed_vehicles != nullptr) {
        QList<QString*>* arr = allowed_vehicles;
        foreach(QString* o, *arr) {
            delete o;
        }
        delete allowed_vehicles;
    }
}

SWGShipment*
SWGShipment::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGShipment::fromJsonObject(QJsonObject &pJson) {
    ::Swagger::setValue(&id, pJson["id"], "QString", "QString");
    ::Swagger::setValue(&name, pJson["name"], "QString", "QString");
    ::Swagger::setValue(&priority, pJson["priority"], "qint32", "");
    ::Swagger::setValue(&pickup, pJson["pickup"], "SWGStop", "SWGStop");
    ::Swagger::setValue(&delivery, pJson["delivery"], "SWGStop", "SWGStop");
    
    
    ::Swagger::setValue(&size, pJson["size"], "QList", "qint32");
    
    ::Swagger::setValue(&required_skills, pJson["required_skills"], "QList", "QString");
    
    
    ::Swagger::setValue(&allowed_vehicles, pJson["allowed_vehicles"], "QList", "QString");
    
}

QString
SWGShipment::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
SWGShipment::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    
    toJsonValue(QString("id"), id, obj, QString("QString"));

    toJsonValue(QString("name"), name, obj, QString("QString"));

    obj->insert("priority", QJsonValue(priority));

    toJsonValue(QString("pickup"), pickup, obj, QString("SWGStop"));

    toJsonValue(QString("delivery"), delivery, obj, QString("SWGStop"));

    QJsonArray sizeJsonArray;
    toJsonArray((QList<void*>*)size, &sizeJsonArray, "size", "qint32");
    obj->insert("size", sizeJsonArray);

    QJsonArray required_skillsJsonArray;
    toJsonArray((QList<void*>*)required_skills, &required_skillsJsonArray, "required_skills", "QString");
    obj->insert("required_skills", required_skillsJsonArray);

    QJsonArray allowed_vehiclesJsonArray;
    toJsonArray((QList<void*>*)allowed_vehicles, &allowed_vehiclesJsonArray, "allowed_vehicles", "QString");
    obj->insert("allowed_vehicles", allowed_vehiclesJsonArray);

    return obj;
}

QString*
SWGShipment::getId() {
    return id;
}
void
SWGShipment::setId(QString* id) {
    this->id = id;
}

QString*
SWGShipment::getName() {
    return name;
}
void
SWGShipment::setName(QString* name) {
    this->name = name;
}

qint32
SWGShipment::getPriority() {
    return priority;
}
void
SWGShipment::setPriority(qint32 priority) {
    this->priority = priority;
}

SWGStop*
SWGShipment::getPickup() {
    return pickup;
}
void
SWGShipment::setPickup(SWGStop* pickup) {
    this->pickup = pickup;
}

SWGStop*
SWGShipment::getDelivery() {
    return delivery;
}
void
SWGShipment::setDelivery(SWGStop* delivery) {
    this->delivery = delivery;
}

QList<qint32>*
SWGShipment::getSize() {
    return size;
}
void
SWGShipment::setSize(QList<qint32>* size) {
    this->size = size;
}

QList<QString*>*
SWGShipment::getRequiredSkills() {
    return required_skills;
}
void
SWGShipment::setRequiredSkills(QList<QString*>* required_skills) {
    this->required_skills = required_skills;
}

QList<QString*>*
SWGShipment::getAllowedVehicles() {
    return allowed_vehicles;
}
void
SWGShipment::setAllowedVehicles(QList<QString*>* allowed_vehicles) {
    this->allowed_vehicles = allowed_vehicles;
}


}

