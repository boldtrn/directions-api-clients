/**
 * GraphHopper Directions API
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * SWGRoute.h
 * 
 * 
 */

#ifndef SWGRoute_H_
#define SWGRoute_H_

#include <QJsonObject>


#include "SWGActivity.h"
#include "SWGRoutePoint.h"
#include <QList>
#include <QString>

#include "SWGObject.h"


namespace Swagger {

class SWGRoute: public SWGObject {
public:
    SWGRoute();
    SWGRoute(QString* json);
    virtual ~SWGRoute();
    void init();
    void cleanup();

    QString asJson ();
    QJsonObject* asJsonObject();
    void fromJsonObject(QJsonObject &json);
    SWGRoute* fromJson(QString &jsonString);

    QString* getVehicleId();
    void setVehicleId(QString* vehicle_id);

    qint64 getDistance();
    void setDistance(qint64 distance);

    qint64 getTransportTime();
    void setTransportTime(qint64 transport_time);

    qint64 getCompletionTime();
    void setCompletionTime(qint64 completion_time);

    qint64 getWaitingTime();
    void setWaitingTime(qint64 waiting_time);

    QList<SWGActivity*>* getActivities();
    void setActivities(QList<SWGActivity*>* activities);

    QList<SWGRoutePoint*>* getPoints();
    void setPoints(QList<SWGRoutePoint*>* points);


private:
    QString* vehicle_id;
    qint64 distance;
    qint64 transport_time;
    qint64 completion_time;
    qint64 waiting_time;
    QList<SWGActivity*>* activities;
    QList<SWGRoutePoint*>* points;
};

}

#endif /* SWGRoute_H_ */
